{"bad": "import random\ndef even_odd(num):\n    start = 5\n    while start >0 :\n        num = random.randint(1, 99)\n        if num % 2 == 0:\n            print ('{} is even'.format,(num.str))\n        else:\n            print('{} is odd'.format,(num.str))\n        start -=1    \n    # If % 2 is 0, the number is even.\n    # Since 0 is falsey, we have to invert it with not.\n    return not num % 2\n    \neven_odd(5)    ", "fix": "import random\ndef even_odd(num):\n    start = 5\n    while start >0 :\n        num = random.randint(1, 99)\n        if num % 2 == 0:\n            print (num , 'is even')\n        else:\n            print('{} is odd'.format,(num))\n        start -=1    \n    # If % 2 is 0, the number is even.\n    # Since 0 is falsey, we have to invert it with not.\n    return not num % 2\n    \neven_odd(5)    ", "index": 3212953, "fixIndex": 3212959, "pyVersion": 3, "exceptionSpan": [7, 41, 7, 47], "spanSlice": [[1, 1, 1, 13], [2, 1, 13, 22], [3, 13, 3, 13], [3, 5, 3, 13], [4, 11, 4, 15], [4, 18, 4, 18], [4, 11, 4, 18], [4, 5, 10, 17], [5, 15, 5, 28], [5, 30, 5, 30], [5, 33, 5, 34], [5, 15, 5, 35], [5, 9, 5, 35], [6, 12, 6, 14], [6, 18, 6, 18], [6, 12, 6, 18], [6, 23, 6, 23], [6, 12, 6, 23], [6, 9, 9, 47], [7, 41, 7, 47], [15, 1, 15, 8], [15, 10, 15, 10], [15, 1, 15, 11]], "varTypes": {"start": "int", "num": "int"}, "spanTypes": {"(15, 1, 15, 8)": "FUNCTION", "(15, 10, 15, 10)": "int", "(3, 13, 3, 13)": "int", "(4, 11, 4, 15)": "int", "(4, 18, 4, 18)": "int", "(4, 11, 4, 18)": "bool", "(5, 15, 5, 20)": "INSTANCE", "(5, 15, 5, 28)": "FUNCTION", "(5, 30, 5, 30)": "int", "(5, 33, 5, 34)": "int", "(5, 15, 5, 35)": "int", "(6, 12, 6, 14)": "int", "(6, 18, 6, 18)": "int", "(6, 12, 6, 18)": "int", "(6, 23, 6, 23)": "int", "(6, 12, 6, 23)": "bool", "(7, 13, 7, 17)": "FUNCTION", "(7, 20, 7, 31)": "str", "(7, 20, 7, 38)": "FUNCTION", "(7, 41, 7, 43)": "int"}, "errMsg": "AttributeError", "ud": {"(15, 1, 15, 8)": [[2, 1, 13, 22]], "(15, 1, 15, 11)": [[2, 1, 13, 22]], "(3, 5, 3, 13)": [[15, 10, 15, 10]], "(4, 11, 4, 15)": [[15, 10, 15, 10], [3, 5, 3, 13]], "(4, 11, 4, 18)": [[15, 10, 15, 10]], "(5, 15, 5, 20)": [[1, 1, 1, 13]], "(5, 15, 5, 28)": [[1, 1, 1, 13]], "(6, 12, 6, 14)": [[5, 15, 5, 35], [5, 9, 5, 35]], "(6, 12, 6, 18)": [[5, 15, 5, 35]], "(6, 12, 6, 23)": [[4, 18, 4, 18]], "(6, 9, 9, 47)": [[4, 11, 4, 18]], "(7, 41, 7, 43)": [[5, 15, 5, 35], [5, 9, 5, 35]], "(7, 41, 7, 47)": [[5, 15, 5, 35]]}, "isConsecutive": true, "isFinal": true}
