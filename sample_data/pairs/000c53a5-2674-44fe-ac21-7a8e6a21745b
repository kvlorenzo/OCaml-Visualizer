{"bad": "h1, m1, h2, m2 = input ( ) . split ( )\nh1, m1, h2, m2 = int (h1), int (m1), int (h2), int (m2)\nmt1, mt2 = (h1 * 60) + m1, (h2 * 60) + m2\nif (mt1 < mt2):\n    t = mt2 - mt1\n    print (\"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\" % (t // 60, (t % 60)))\nelif (mt1 == mt2):\n    print (\"O JOGO DUROU 24 HORA(S) E 0 MINUTO(S)\")\nelse:\n    t = mt1 - mt2\n    print (\"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\" % (t // 60, (t % 60)))", "fix": "h1, m1, h2, m2 = input ( ) . split ( )\nh1, m1, h2, m2 = int (h1), int (m1), int (h2), int (m2)\nmt1, mt2 = (h1 * 60) + m1, (h2 * 60) + m2\nif (mt1 < mt2):\n    t = mt2 - mt1\n    print (\"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\" % (t // 60, (t % 60)))\nelif (mt1 == mt2):\n    print (\"O JOGO DUROU 24 HORA(S) E 0 MINUTO(S)\")\nelse:\n    t = mt1 - mt2\n    print (\"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\" % (t // 60, (t % 60)))", "index": 2071174, "fixIndex": 2071178, "pyVersion": 3, "exceptionSpan": [1, 1, 1, 38], "spanSlice": [[1, 18, 1, 22], [1, 18, 1, 26], [1, 18, 1, 34], [1, 18, 1, 38], [1, 1, 1, 38]], "varTypes": {}, "spanTypes": {"(1, 18, 1, 22)": "FUNCTION", "(1, 18, 1, 26)": "str", "(1, 18, 1, 34)": "FUNCTION", "(1, 18, 1, 38)": "LIST"}, "errMsg": "ValueError", "ud": {}, "isConsecutive": true, "isFinal": false}
{"bad": "l = [ ]\nn = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    if (x >= y):\n        for e in range (0, (x - y)):\n            l . append (e)\n            print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))", "fix": "n = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    l = [ ]\n    if (x > 0 and y > 0):\n        for e in range (y, x + 1):\n            l . append (e)\n        print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "index": 2072636, "fixIndex": 2072869, "pyVersion": 3, "exceptionSpan": [9, 51, 9, 55], "spanSlice": [[1, 5, 1, 7], [2, 5, 2, 5], [2, 1, 2, 5], [3, 8, 3, 8], [3, 12, 3, 12], [3, 8, 3, 12], [3, 7, 3, 13], [3, 1, 9, 103], [4, 12, 4, 16], [4, 12, 4, 20], [4, 12, 4, 28], [4, 12, 4, 32], [4, 5, 4, 32], [5, 12, 5, 14], [5, 17, 5, 17], [5, 12, 5, 18], [5, 21, 5, 23], [5, 26, 5, 26], [5, 21, 5, 27], [5, 12, 5, 27], [5, 5, 5, 27], [6, 9, 6, 9], [6, 14, 6, 14], [6, 9, 6, 14], [6, 8, 6, 15], [6, 5, 9, 103], [7, 18, 7, 22], [7, 25, 7, 25], [7, 29, 7, 29], [7, 33, 7, 33], [7, 29, 7, 33], [7, 28, 7, 34], [7, 18, 7, 35], [7, 9, 9, 103], [8, 13, 8, 22], [8, 25, 8, 25], [8, 13, 8, 26], [9, 51, 9, 55]], "varTypes": {"l": "LIST", "n": "int"}, "spanTypes": {"(1, 5, 1, 7)": "LIST", "(2, 5, 2, 5)": "int", "(3, 8, 3, 8)": "int", "(3, 12, 3, 12)": "int", "(3, 8, 3, 12)": "bool", "(3, 7, 3, 13)": "bool", "(4, 12, 4, 16)": "FUNCTION", "(4, 12, 4, 20)": "str", "(4, 12, 4, 28)": "FUNCTION", "(4, 12, 4, 32)": "LIST", "(5, 12, 5, 14)": "CLASS", "(5, 17, 5, 17)": "str", "(5, 12, 5, 18)": "int", "(5, 21, 5, 23)": "CLASS", "(5, 26, 5, 26)": "str", "(5, 21, 5, 27)": "int", "(5, 12, 5, 27)": "TUPLE", "(6, 9, 6, 9)": "int", "(6, 14, 6, 14)": "int", "(6, 9, 6, 14)": "bool", "(6, 8, 6, 15)": "bool", "(7, 18, 7, 22)": "CLASS", "(7, 25, 7, 25)": "int", "(7, 29, 7, 29)": "int", "(7, 33, 7, 33)": "int", "(7, 29, 7, 33)": "int", "(7, 28, 7, 34)": "int", "(7, 18, 7, 35)": "INSTANCE", "(8, 13, 8, 13)": "LIST", "(8, 13, 8, 22)": "FUNCTION", "(8, 25, 8, 25)": "int", "(8, 13, 8, 26)": "NoneType", "(9, 13, 9, 17)": "FUNCTION", "(9, 20, 9, 39)": "str", "(9, 44, 9, 44)": "LIST", "(9, 47, 9, 47)": "int", "(9, 44, 9, 48)": "int", "(9, 51, 9, 51)": "LIST", "(9, 54, 9, 54)": "int"}, "errMsg": "IndexError", "ud": {"(3, 8, 3, 8)": [[2, 5, 2, 5], [2, 1, 2, 5]], "(3, 8, 3, 12)": [[2, 5, 2, 5]], "(5, 17, 5, 17)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 12, 5, 18)": [[4, 12, 4, 32]], "(5, 26, 5, 26)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 21, 5, 27)": [[5, 12, 5, 14], [4, 12, 4, 32]], "(5, 5, 5, 27)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(6, 9, 6, 9)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(6, 14, 6, 14)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(6, 9, 6, 14)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(6, 8, 6, 15)": [[3, 8, 3, 12]], "(6, 5, 9, 103)": [[3, 8, 3, 12]], "(7, 29, 7, 29)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(7, 33, 7, 33)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 29, 7, 33)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(7, 18, 7, 35)": [[3, 12, 3, 12]], "(8, 13, 8, 13)": [[1, 1, 1, 7], [1, 5, 1, 7]], "(8, 13, 8, 22)": [[1, 5, 1, 7]], "(8, 25, 8, 25)": [[3, 12, 3, 12], [7, 9, 9, 103]], "(8, 13, 8, 26)": [[3, 12, 3, 12]], "(9, 44, 9, 44)": [[8, 13, 8, 26], [1, 1, 1, 7]], "(9, 44, 9, 48)": [[8, 13, 8, 26], [3, 12, 3, 12]], "(9, 51, 9, 51)": [[8, 13, 8, 26], [1, 1, 1, 7]], "(9, 51, 9, 55)": [[8, 13, 8, 26], [2, 5, 2, 5]]}, "isConsecutive": false, "isFinal": false}
{"bad": "l = [ ]\nn = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    if (x >= y):\n        for e in range (y, (x - y)):\n            l . append (e)\n        print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "fix": "n = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    l = [ ]\n    if (x > 0 and y > 0):\n        for e in range (y, x + 1):\n            l . append (e)\n        print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "index": 2072661, "fixIndex": 2072869, "pyVersion": 3, "exceptionSpan": [9, 47, 9, 51], "spanSlice": [[1, 5, 1, 7], [2, 5, 2, 5], [2, 1, 2, 5], [3, 8, 3, 8], [3, 12, 3, 12], [3, 8, 3, 12], [3, 7, 3, 13], [3, 1, 11, 14], [4, 12, 4, 16], [4, 12, 4, 20], [4, 12, 4, 28], [4, 12, 4, 32], [4, 5, 4, 32], [5, 12, 5, 14], [5, 17, 5, 17], [5, 12, 5, 18], [5, 21, 5, 23], [5, 26, 5, 26], [5, 21, 5, 27], [5, 12, 5, 27], [5, 5, 5, 27], [6, 9, 6, 9], [6, 14, 6, 14], [6, 9, 6, 14], [6, 8, 6, 15], [6, 5, 11, 14], [7, 18, 7, 22], [7, 25, 7, 25], [7, 29, 7, 29], [7, 33, 7, 33], [7, 29, 7, 33], [7, 28, 7, 34], [7, 18, 7, 35], [7, 9, 8, 26], [8, 13, 8, 22], [8, 25, 8, 25], [8, 13, 8, 26], [9, 47, 9, 51]], "varTypes": {"l": "LIST", "n": "int"}, "spanTypes": {"(1, 5, 1, 7)": "LIST", "(2, 5, 2, 5)": "int", "(3, 8, 3, 8)": "int", "(3, 12, 3, 12)": "int", "(3, 8, 3, 12)": "bool", "(3, 7, 3, 13)": "bool", "(4, 12, 4, 16)": "FUNCTION", "(4, 12, 4, 20)": "str", "(4, 12, 4, 28)": "FUNCTION", "(4, 12, 4, 32)": "LIST", "(5, 12, 5, 14)": "CLASS", "(5, 17, 5, 17)": "str", "(5, 12, 5, 18)": "int", "(5, 21, 5, 23)": "CLASS", "(5, 26, 5, 26)": "str", "(5, 21, 5, 27)": "int", "(5, 12, 5, 27)": "TUPLE", "(6, 9, 6, 9)": "int", "(6, 14, 6, 14)": "int", "(6, 9, 6, 14)": "bool", "(6, 8, 6, 15)": "bool", "(7, 18, 7, 22)": "CLASS", "(7, 25, 7, 25)": "int", "(7, 29, 7, 29)": "int", "(7, 33, 7, 33)": "int", "(7, 29, 7, 33)": "int", "(7, 28, 7, 34)": "int", "(7, 18, 7, 35)": "INSTANCE", "(8, 13, 8, 13)": "LIST", "(8, 13, 8, 22)": "FUNCTION", "(8, 25, 8, 25)": "int", "(8, 13, 8, 26)": "NoneType", "(9, 9, 9, 13)": "FUNCTION", "(9, 16, 9, 35)": "str", "(9, 40, 9, 40)": "LIST", "(9, 43, 9, 43)": "int", "(9, 40, 9, 44)": "int", "(9, 47, 9, 47)": "LIST", "(9, 50, 9, 50)": "int"}, "errMsg": "IndexError", "ud": {"(3, 8, 3, 8)": [[2, 5, 2, 5], [2, 1, 2, 5]], "(3, 8, 3, 12)": [[2, 5, 2, 5]], "(5, 17, 5, 17)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 12, 5, 18)": [[4, 12, 4, 32]], "(5, 26, 5, 26)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 21, 5, 27)": [[5, 12, 5, 14], [4, 12, 4, 32]], "(5, 5, 5, 27)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(6, 9, 6, 9)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(6, 14, 6, 14)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(6, 9, 6, 14)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(6, 8, 6, 15)": [[3, 8, 3, 12]], "(6, 5, 11, 14)": [[3, 8, 3, 12]], "(7, 25, 7, 25)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 29, 7, 29)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(7, 33, 7, 33)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 29, 7, 33)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(7, 18, 7, 35)": [[5, 21, 5, 27]], "(8, 13, 8, 13)": [[1, 1, 1, 7], [1, 5, 1, 7]], "(8, 13, 8, 22)": [[1, 5, 1, 7]], "(8, 25, 8, 25)": [[5, 21, 5, 27], [7, 9, 8, 26]], "(8, 13, 8, 26)": [[5, 21, 5, 27]], "(9, 40, 9, 40)": [[8, 13, 8, 26], [1, 1, 1, 7]], "(9, 40, 9, 44)": [[8, 13, 8, 26], [3, 12, 3, 12], [5, 21, 5, 27]], "(9, 47, 9, 47)": [[8, 13, 8, 26], [1, 1, 1, 7]], "(9, 47, 9, 51)": [[8, 13, 8, 26], [2, 5, 2, 5]]}, "isConsecutive": false, "isFinal": false}
{"bad": "l = [ ]\nn = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    if (x >= y):\n        for e in range (y, (x - y)):\n            for t in range (len (x - y)):\n                l [t - 1] = e\n            print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "fix": "n = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    l = [ ]\n    if (x > 0 and y > 0):\n        for e in range (y, x + 1):\n            l . append (e)\n        print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "index": 2072725, "fixIndex": 2072869, "pyVersion": 3, "exceptionSpan": [8, 29, 8, 39], "spanSlice": [[2, 5, 2, 5], [2, 1, 2, 5], [3, 8, 3, 8], [3, 12, 3, 12], [3, 8, 3, 12], [3, 7, 3, 13], [3, 1, 12, 14], [4, 12, 4, 16], [4, 12, 4, 20], [4, 12, 4, 28], [4, 12, 4, 32], [4, 5, 4, 32], [5, 12, 5, 14], [5, 17, 5, 17], [5, 12, 5, 18], [5, 21, 5, 23], [5, 26, 5, 26], [5, 21, 5, 27], [5, 12, 5, 27], [5, 5, 5, 27], [6, 9, 6, 9], [6, 14, 6, 14], [6, 9, 6, 14], [6, 8, 6, 15], [6, 5, 12, 14], [7, 18, 7, 22], [7, 25, 7, 25], [7, 29, 7, 29], [7, 33, 7, 33], [7, 29, 7, 33], [7, 28, 7, 34], [7, 18, 7, 35], [7, 9, 10, 103], [8, 29, 8, 31], [8, 34, 8, 34], [8, 38, 8, 38], [8, 34, 8, 38], [8, 29, 8, 39]], "varTypes": {"l": "LIST", "n": "int"}, "spanTypes": {"(1, 5, 1, 7)": "LIST", "(2, 5, 2, 5)": "int", "(3, 8, 3, 8)": "int", "(3, 12, 3, 12)": "int", "(3, 8, 3, 12)": "bool", "(3, 7, 3, 13)": "bool", "(4, 12, 4, 16)": "FUNCTION", "(4, 12, 4, 20)": "str", "(4, 12, 4, 28)": "FUNCTION", "(4, 12, 4, 32)": "LIST", "(5, 12, 5, 14)": "CLASS", "(5, 17, 5, 17)": "str", "(5, 12, 5, 18)": "int", "(5, 21, 5, 23)": "CLASS", "(5, 26, 5, 26)": "str", "(5, 21, 5, 27)": "int", "(5, 12, 5, 27)": "TUPLE", "(6, 9, 6, 9)": "int", "(6, 14, 6, 14)": "int", "(6, 9, 6, 14)": "bool", "(6, 8, 6, 15)": "bool", "(7, 18, 7, 22)": "CLASS", "(7, 25, 7, 25)": "int", "(7, 29, 7, 29)": "int", "(7, 33, 7, 33)": "int", "(7, 29, 7, 33)": "int", "(7, 28, 7, 34)": "int", "(7, 18, 7, 35)": "INSTANCE", "(8, 22, 8, 26)": "CLASS", "(8, 29, 8, 31)": "FUNCTION", "(8, 34, 8, 34)": "int", "(8, 38, 8, 38)": "int", "(8, 34, 8, 38)": "int"}, "errMsg": "TypeError", "ud": {"(3, 8, 3, 8)": [[2, 5, 2, 5], [2, 1, 2, 5]], "(3, 8, 3, 12)": [[2, 5, 2, 5]], "(5, 17, 5, 17)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 12, 5, 18)": [[4, 12, 4, 32]], "(5, 26, 5, 26)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 21, 5, 27)": [[5, 12, 5, 14], [4, 12, 4, 32]], "(5, 5, 5, 27)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(6, 9, 6, 9)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(6, 14, 6, 14)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(6, 9, 6, 14)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(6, 8, 6, 15)": [[3, 8, 3, 12]], "(6, 5, 12, 14)": [[3, 8, 3, 12]], "(7, 25, 7, 25)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 29, 7, 29)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(7, 33, 7, 33)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 29, 7, 33)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(7, 18, 7, 35)": [[5, 21, 5, 27]], "(8, 34, 8, 34)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(8, 38, 8, 38)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(8, 34, 8, 38)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(8, 29, 8, 39)": [[7, 29, 7, 33]]}, "isConsecutive": false, "isFinal": false}
{"bad": "l = [ ]\nn = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    if (x >= y):\n        for e in range (y, (x - y)):\n            for t in range ((x - y)):\n                l [t - 1] = e\n            print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "fix": "n = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    l = [ ]\n    if (x > 0 and y > 0):\n        for e in range (y, x + 1):\n            l . append (e)\n        print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "index": 2072742, "fixIndex": 2072869, "pyVersion": 3, "exceptionSpan": [9, 17, 9, 29], "spanSlice": [[1, 5, 1, 7], [1, 1, 1, 7], [2, 5, 2, 5], [2, 1, 2, 5], [3, 8, 3, 8], [3, 12, 3, 12], [3, 8, 3, 12], [3, 7, 3, 13], [3, 1, 12, 14], [4, 12, 4, 16], [4, 12, 4, 20], [4, 12, 4, 28], [4, 12, 4, 32], [4, 5, 4, 32], [5, 12, 5, 14], [5, 17, 5, 17], [5, 12, 5, 18], [5, 21, 5, 23], [5, 26, 5, 26], [5, 21, 5, 27], [5, 12, 5, 27], [5, 5, 5, 27], [6, 9, 6, 9], [6, 14, 6, 14], [6, 9, 6, 14], [6, 8, 6, 15], [6, 5, 12, 14], [7, 18, 7, 22], [7, 25, 7, 25], [7, 29, 7, 29], [7, 33, 7, 33], [7, 29, 7, 33], [7, 28, 7, 34], [7, 18, 7, 35], [7, 9, 10, 103], [8, 22, 8, 26], [8, 30, 8, 30], [8, 34, 8, 34], [8, 30, 8, 34], [8, 29, 8, 35], [8, 22, 8, 36], [8, 13, 9, 29], [9, 29, 9, 29], [9, 17, 9, 29]], "varTypes": {"l": "LIST", "n": "int"}, "spanTypes": {"(1, 5, 1, 7)": "LIST", "(2, 5, 2, 5)": "int", "(3, 8, 3, 8)": "int", "(3, 12, 3, 12)": "int", "(3, 8, 3, 12)": "bool", "(3, 7, 3, 13)": "bool", "(4, 12, 4, 16)": "FUNCTION", "(4, 12, 4, 20)": "str", "(4, 12, 4, 28)": "FUNCTION", "(4, 12, 4, 32)": "LIST", "(5, 12, 5, 14)": "CLASS", "(5, 17, 5, 17)": "str", "(5, 12, 5, 18)": "int", "(5, 21, 5, 23)": "CLASS", "(5, 26, 5, 26)": "str", "(5, 21, 5, 27)": "int", "(5, 12, 5, 27)": "TUPLE", "(6, 9, 6, 9)": "int", "(6, 14, 6, 14)": "int", "(6, 9, 6, 14)": "bool", "(6, 8, 6, 15)": "bool", "(7, 18, 7, 22)": "CLASS", "(7, 25, 7, 25)": "int", "(7, 29, 7, 29)": "int", "(7, 33, 7, 33)": "int", "(7, 29, 7, 33)": "int", "(7, 28, 7, 34)": "int", "(7, 18, 7, 35)": "INSTANCE", "(8, 22, 8, 26)": "CLASS", "(8, 30, 8, 30)": "int", "(8, 34, 8, 34)": "int", "(8, 30, 8, 34)": "int", "(8, 29, 8, 35)": "int", "(8, 22, 8, 36)": "INSTANCE", "(9, 29, 9, 29)": "int"}, "errMsg": "IndexError", "ud": {"(3, 8, 3, 8)": [[2, 5, 2, 5], [2, 1, 2, 5]], "(3, 8, 3, 12)": [[2, 5, 2, 5]], "(5, 17, 5, 17)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 12, 5, 18)": [[4, 12, 4, 32]], "(5, 26, 5, 26)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 21, 5, 27)": [[5, 12, 5, 14], [4, 12, 4, 32]], "(5, 5, 5, 27)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(6, 9, 6, 9)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(6, 14, 6, 14)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(6, 9, 6, 14)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(6, 8, 6, 15)": [[3, 8, 3, 12]], "(6, 5, 12, 14)": [[3, 8, 3, 12]], "(7, 25, 7, 25)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 29, 7, 29)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(7, 33, 7, 33)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 29, 7, 33)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(7, 18, 7, 35)": [[5, 21, 5, 27]], "(8, 30, 8, 30)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(8, 34, 8, 34)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(8, 30, 8, 34)": [[5, 21, 5, 27], [5, 12, 5, 18]], "(8, 29, 8, 35)": [[7, 29, 7, 33]], "(8, 22, 8, 36)": [[7, 29, 7, 33], [7, 18, 7, 22]], "(9, 29, 9, 29)": [[7, 9, 10, 103], [5, 21, 5, 27]], "(9, 17, 9, 29)": [[3, 12, 3, 12], [1, 1, 1, 7], [1, 5, 1, 7], [5, 21, 5, 27], [8, 13, 9, 29]]}, "isConsecutive": false, "isFinal": false}
{"bad": "l = [ ]\nn = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    if (x > 0 and y > 0):\n        for e in range (x, y + 1):\n            l . append (e)\n        print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "fix": "n = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    l = [ ]\n    if (x > 0 and y > 0):\n        for e in range (y, x + 1):\n            l . append (e)\n        print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "index": 2072841, "fixIndex": 2072869, "pyVersion": 3, "exceptionSpan": [9, 40, 9, 44], "spanSlice": [[1, 5, 1, 7], [2, 5, 2, 5], [2, 1, 2, 5], [3, 8, 3, 8], [3, 12, 3, 12], [3, 8, 3, 12], [3, 7, 3, 13], [3, 1, 11, 14], [4, 12, 4, 16], [4, 12, 4, 20], [4, 12, 4, 28], [4, 12, 4, 32], [4, 5, 4, 32], [5, 12, 5, 14], [5, 17, 5, 17], [5, 12, 5, 18], [5, 21, 5, 23], [5, 26, 5, 26], [5, 21, 5, 27], [5, 12, 5, 27], [5, 5, 5, 27], [6, 9, 6, 9], [6, 13, 6, 13], [6, 9, 6, 13], [6, 19, 6, 19], [6, 23, 6, 23], [6, 19, 6, 23], [6, 9, 6, 23], [6, 8, 6, 24], [6, 5, 11, 14], [9, 40, 9, 44]], "varTypes": {"l": "LIST", "n": "int"}, "spanTypes": {"(1, 5, 1, 7)": "LIST", "(2, 5, 2, 5)": "int", "(3, 8, 3, 8)": "int", "(3, 12, 3, 12)": "int", "(3, 8, 3, 12)": "bool", "(3, 7, 3, 13)": "bool", "(4, 12, 4, 16)": "FUNCTION", "(4, 12, 4, 20)": "str", "(4, 12, 4, 28)": "FUNCTION", "(4, 12, 4, 32)": "LIST", "(5, 12, 5, 14)": "CLASS", "(5, 17, 5, 17)": "str", "(5, 12, 5, 18)": "int", "(5, 21, 5, 23)": "CLASS", "(5, 26, 5, 26)": "str", "(5, 21, 5, 27)": "int", "(5, 12, 5, 27)": "TUPLE", "(6, 9, 6, 9)": "int", "(6, 13, 6, 13)": "int", "(6, 9, 6, 13)": "bool", "(6, 19, 6, 19)": "int", "(6, 23, 6, 23)": "int", "(6, 19, 6, 23)": "bool", "(6, 9, 6, 23)": "bool", "(6, 8, 6, 24)": "bool", "(7, 18, 7, 22)": "CLASS", "(7, 25, 7, 25)": "int", "(7, 28, 7, 28)": "int", "(7, 32, 7, 32)": "int", "(7, 28, 7, 32)": "int", "(7, 18, 7, 33)": "INSTANCE", "(9, 9, 9, 13)": "FUNCTION", "(9, 16, 9, 35)": "str", "(9, 40, 9, 40)": "LIST", "(9, 43, 9, 43)": "int"}, "errMsg": "IndexError", "ud": {"(3, 8, 3, 8)": [[2, 5, 2, 5], [2, 1, 2, 5]], "(3, 8, 3, 12)": [[2, 5, 2, 5]], "(5, 17, 5, 17)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 12, 5, 18)": [[4, 12, 4, 32]], "(5, 26, 5, 26)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(5, 21, 5, 27)": [[5, 12, 5, 14], [4, 12, 4, 32]], "(5, 5, 5, 27)": [[4, 5, 4, 32], [4, 12, 4, 32]], "(6, 9, 6, 9)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(6, 9, 6, 13)": [[3, 12, 3, 12], [5, 12, 5, 18]], "(6, 19, 6, 19)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(6, 19, 6, 23)": [[3, 12, 3, 12], [5, 21, 5, 27]], "(6, 9, 6, 23)": [[3, 8, 3, 12]], "(6, 8, 6, 24)": [[3, 8, 3, 12]], "(6, 5, 11, 14)": [[3, 8, 3, 12]], "(7, 25, 7, 25)": [[5, 5, 5, 27], [5, 12, 5, 18]], "(7, 28, 7, 28)": [[5, 21, 5, 27], [5, 5, 5, 27]], "(7, 28, 7, 32)": [[2, 5, 2, 5], [5, 21, 5, 27]], "(7, 18, 7, 33)": [[5, 12, 5, 18]], "(9, 40, 9, 40)": [[1, 1, 1, 7], [1, 5, 1, 7]], "(9, 40, 9, 44)": [[3, 12, 3, 12], [1, 5, 1, 7]]}, "isConsecutive": true, "isFinal": false}
{"bad": "n = 1\nwhile (n > 0):\n    x, y = input ( ) . split ( )\n    x, y = int (x), int (y)\n    l = [ ]\n    if (x > 0 and y > 0):\n        if (x > y):\n            for e in range (y, x + 1):\n                l . append (e)\n            print (\"%d %d %d %d Sum=%d\" % (l, (l [0] + l[1] + l [2] + l [3])))\n        elif (y > x):\n            for e in range (x, y + 1):\n                l . append (e)\n            print (\"%d %d %d %d Sum=%d\" % (l [0], l [1], l [2], l [3], (l [0] + l[1] + l [2] + l [3])))\n    else:\n        n -= 1", "fix": "x = int (input ( ))\ny = int (input ( ))\nsoma = 0\nif (x > y):\n    for e in range (y, x + 1):\n        t = y + e\n        if (t % 5 == 2 or t % 5 == 3):\n            print (t)\nelif (y > x):\n    for e in range (x, y + 1):\n        t = x + e\n        if (t % 5 == 2 or t % 5 == 3):\n            print (t)", "index": 2072987, "fixIndex": 2073249, "pyVersion": 3, "exceptionSpan": [10, 20, 10, 77], "spanSlice": [[1, 5, 1, 5], [1, 1, 1, 5], [2, 8, 2, 8], [2, 12, 2, 12], [2, 8, 2, 12], [2, 7, 2, 13], [2, 1, 16, 14], [3, 12, 3, 16], [3, 12, 3, 20], [3, 12, 3, 28], [3, 12, 3, 32], [3, 5, 3, 32], [4, 12, 4, 14], [4, 17, 4, 17], [4, 12, 4, 18], [4, 21, 4, 23], [4, 26, 4, 26], [4, 21, 4, 27], [4, 12, 4, 27], [4, 5, 4, 27], [5, 9, 5, 11], [5, 5, 5, 11], [6, 9, 6, 9], [6, 13, 6, 13], [6, 9, 6, 13], [6, 19, 6, 19], [6, 23, 6, 23], [6, 19, 6, 23], [6, 9, 6, 23], [6, 8, 6, 24], [6, 5, 16, 14], [7, 13, 7, 13], [7, 17, 7, 17], [7, 13, 7, 17], [7, 12, 7, 18], [7, 9, 14, 103], [8, 22, 8, 26], [8, 29, 8, 29], [8, 32, 8, 32], [8, 36, 8, 36], [8, 32, 8, 36], [8, 22, 8, 37], [8, 13, 9, 30], [9, 17, 9, 26], [9, 29, 9, 29], [9, 17, 9, 30], [10, 20, 10, 39], [10, 44, 10, 44], [10, 48, 10, 52], [10, 56, 10, 59], [10, 48, 10, 59], [10, 63, 10, 67], [10, 48, 10, 67], [10, 71, 10, 75], [10, 48, 10, 75], [10, 47, 10, 76], [10, 44, 10, 76], [10, 43, 10, 77], [10, 20, 10, 77]], "varTypes": {"n": "int", "l": "LIST"}, "spanTypes": {"(1, 5, 1, 5)": "int", "(2, 8, 2, 8)": "int", "(2, 12, 2, 12)": "int", "(2, 8, 2, 12)": "bool", "(2, 7, 2, 13)": "bool", "(3, 12, 3, 16)": "FUNCTION", "(3, 12, 3, 20)": "str", "(3, 12, 3, 28)": "FUNCTION", "(3, 12, 3, 32)": "LIST", "(4, 12, 4, 14)": "CLASS", "(4, 17, 4, 17)": "str", "(4, 12, 4, 18)": "int", "(4, 21, 4, 23)": "CLASS", "(4, 26, 4, 26)": "str", "(4, 21, 4, 27)": "int", "(4, 12, 4, 27)": "TUPLE", "(5, 9, 5, 11)": "LIST", "(6, 9, 6, 9)": "int", "(6, 13, 6, 13)": "int", "(6, 9, 6, 13)": "bool", "(6, 19, 6, 19)": "int", "(6, 23, 6, 23)": "int", "(6, 19, 6, 23)": "bool", "(6, 9, 6, 23)": "bool", "(6, 8, 6, 24)": "bool", "(7, 13, 7, 13)": "int", "(7, 17, 7, 17)": "int", "(7, 13, 7, 17)": "bool", "(7, 12, 7, 18)": "bool", "(11, 15, 11, 15)": "int", "(11, 19, 11, 19)": "int", "(11, 15, 11, 19)": "bool", "(11, 14, 11, 20)": "bool", "(8, 22, 8, 26)": "CLASS", "(8, 29, 8, 29)": "int", "(8, 32, 8, 32)": "int", "(8, 36, 8, 36)": "int", "(8, 32, 8, 36)": "int", "(8, 22, 8, 37)": "INSTANCE", "(9, 17, 9, 17)": "LIST", "(9, 17, 9, 26)": "FUNCTION", "(9, 29, 9, 29)": "int", "(9, 17, 9, 30)": "NoneType", "(10, 13, 10, 17)": "FUNCTION", "(10, 20, 10, 39)": "str", "(10, 44, 10, 44)": "LIST", "(10, 48, 10, 48)": "LIST", "(10, 51, 10, 51)": "int", "(10, 48, 10, 52)": "int", "(10, 56, 10, 56)": "LIST", "(10, 58, 10, 58)": "int", "(10, 56, 10, 59)": "int", "(10, 48, 10, 59)": "int", "(10, 63, 10, 63)": "LIST", "(10, 66, 10, 66)": "int", "(10, 63, 10, 67)": "int", "(10, 48, 10, 67)": "int", "(10, 71, 10, 71)": "LIST", "(10, 74, 10, 74)": "int", "(10, 71, 10, 75)": "int", "(10, 48, 10, 75)": "int", "(10, 47, 10, 76)": "int", "(10, 44, 10, 76)": "TUPLE", "(10, 43, 10, 77)": "TUPLE"}, "errMsg": "TypeError", "ud": {"(2, 8, 2, 8)": [[1, 1, 1, 5], [1, 5, 1, 5]], "(2, 8, 2, 12)": [[1, 5, 1, 5]], "(4, 17, 4, 17)": [[3, 5, 3, 32], [3, 12, 3, 32]], "(4, 12, 4, 18)": [[3, 12, 3, 32]], "(4, 26, 4, 26)": [[3, 5, 3, 32], [3, 12, 3, 32]], "(4, 21, 4, 27)": [[4, 12, 4, 14], [3, 12, 3, 32]], "(4, 5, 4, 27)": [[3, 5, 3, 32], [3, 12, 3, 32]], "(6, 9, 6, 9)": [[4, 5, 4, 27], [4, 12, 4, 18]], "(6, 9, 6, 13)": [[4, 12, 4, 18], [2, 12, 2, 12]], "(6, 19, 6, 19)": [[4, 21, 4, 27], [4, 5, 4, 27]], "(6, 19, 6, 23)": [[4, 21, 4, 27], [2, 12, 2, 12]], "(6, 9, 6, 23)": [[2, 8, 2, 12]], "(6, 8, 6, 24)": [[2, 8, 2, 12]], "(6, 5, 16, 14)": [[2, 8, 2, 12]], "(7, 13, 7, 13)": [[4, 5, 4, 27], [4, 12, 4, 18]], "(7, 17, 7, 17)": [[4, 21, 4, 27], [4, 5, 4, 27]], "(7, 13, 7, 17)": [[4, 21, 4, 27], [4, 12, 4, 18]], "(7, 12, 7, 18)": [[2, 8, 2, 12]], "(11, 15, 11, 15)": [[4, 21, 4, 27], [4, 5, 4, 27]], "(11, 19, 11, 19)": [[4, 5, 4, 27], [4, 12, 4, 18]], "(11, 15, 11, 19)": [[4, 21, 4, 27], [4, 12, 4, 18]], "(7, 9, 14, 103)": [[2, 8, 2, 12]], "(8, 29, 8, 29)": [[4, 21, 4, 27], [4, 5, 4, 27]], "(8, 32, 8, 32)": [[4, 5, 4, 27], [4, 12, 4, 18]], "(8, 32, 8, 36)": [[1, 5, 1, 5], [4, 12, 4, 18]], "(8, 22, 8, 37)": [[4, 21, 4, 27]], "(9, 17, 9, 17)": [[9, 17, 9, 30], [5, 5, 5, 11]], "(9, 17, 9, 26)": [[9, 17, 9, 30]], "(9, 29, 9, 29)": [[8, 13, 9, 30], [4, 12, 4, 18]], "(9, 17, 9, 30)": [[4, 12, 4, 18]], "(10, 44, 10, 44)": [[9, 17, 9, 30], [5, 5, 5, 11]], "(10, 48, 10, 48)": [[9, 17, 9, 30], [5, 5, 5, 11]], "(10, 48, 10, 52)": [[4, 21, 4, 27], [9, 17, 9, 30], [2, 12, 2, 12]], "(10, 56, 10, 56)": [[9, 17, 9, 30], [5, 5, 5, 11]], "(10, 56, 10, 59)": [[8, 13, 9, 30], [9, 17, 9, 30], [1, 5, 1, 5]], "(10, 48, 10, 59)": [[4, 21, 4, 27], [8, 13, 9, 30]], "(10, 63, 10, 63)": [[9, 17, 9, 30], [5, 5, 5, 11]], "(10, 63, 10, 67)": [[4, 21, 4, 27], [9, 17, 9, 30], [8, 13, 9, 30]], "(10, 48, 10, 67)": [[8, 13, 9, 30]], "(10, 71, 10, 71)": [[9, 17, 9, 30], [5, 5, 5, 11]], "(10, 71, 10, 75)": [[8, 13, 9, 30], [9, 17, 9, 30]], "(10, 48, 10, 75)": [[8, 13, 9, 30], [4, 12, 4, 18]], "(10, 44, 10, 76)": [[9, 17, 9, 30]]}, "isConsecutive": true, "isFinal": true}
