{"bad": "def extractor(string):\n    if len(string) <= 2:\n        return '\"\"' \n    else:\n        newString = \"\"\n        if string[1] != \")\":\n            newString += string[1]\n        else:\n            newString -= string[1:]\n            return newString\n    return extractor(string[1:])\n\n\nprint(extractor(\"hel(lo wo)rld\"))", "fix": "def extractor(string):\n    if len(string) <= 2:\n        return '\"\"' \n    elif string[0] in \"()\":\n        return extractor(string[1:])\n    return string[1] + extractor(string[1:])\n            \n\n\nprint(extractor(\"hel(lo wo)rld\"))", "index": 1562309, "fixIndex": 1562395, "pyVersion": 3, "exceptionSpan": [9, 13, 9, 35], "spanSlice": [[14, 17, 14, 31], [1, 1, 11, 32], [2, 8, 2, 10], [2, 12, 2, 17], [2, 8, 2, 18], [2, 23, 2, 23], [2, 8, 2, 23], [2, 5, 10, 28], [14, 7, 14, 32], [5, 21, 5, 22], [5, 9, 5, 22], [6, 19, 6, 19], [6, 12, 6, 20], [6, 25, 6, 27], [6, 12, 6, 27], [6, 9, 10, 28], [9, 13, 9, 35], [11, 12, 11, 20], [11, 12, 11, 32], [14, 7, 14, 15]], "varTypes": {"newString": "str"}, "spanTypes": {"(14, 1, 14, 5)": "FUNCTION", "(14, 7, 14, 15)": "FUNCTION", "(14, 17, 14, 31)": "str", "(2, 8, 2, 10)": "FUNCTION", "(2, 12, 2, 17)": "str", "(2, 8, 2, 18)": "int", "(2, 23, 2, 23)": "int", "(2, 8, 2, 23)": "bool", "(5, 21, 5, 22)": "str", "(6, 12, 6, 17)": "str", "(6, 19, 6, 19)": "int", "(6, 12, 6, 20)": "str", "(6, 25, 6, 27)": "str", "(6, 12, 6, 27)": "bool", "(7, 26, 7, 31)": "str", "(7, 33, 7, 33)": "int", "(7, 26, 7, 34)": "str", "(11, 12, 11, 20)": "FUNCTION"}, "errMsg": "TypeError", "ud": {"(14, 7, 14, 15)": [[1, 1, 11, 32]], "(14, 7, 14, 32)": [[1, 1, 11, 32]], "(2, 12, 2, 17)": [[11, 12, 11, 32]], "(2, 8, 2, 18)": [[11, 12, 11, 32]], "(6, 12, 6, 17)": [[11, 12, 11, 32]], "(6, 12, 6, 20)": [[11, 12, 11, 32]], "(6, 9, 10, 28)": [[2, 8, 2, 23]], "(7, 26, 7, 31)": [[11, 12, 11, 32]], "(7, 26, 7, 34)": [[6, 19, 6, 19], [11, 12, 11, 32]], "(7, 13, 7, 34)": [[5, 9, 5, 22], [5, 21, 5, 22], [6, 12, 6, 20]], "(11, 12, 11, 20)": [[1, 1, 11, 32]], "(9, 13, 9, 35)": [[5, 9, 5, 22], [11, 12, 11, 32], [5, 21, 5, 22]]}, "isConsecutive": true, "isFinal": false}
{"bad": "def extractor(string):\n    if len(string) <= 2:\n        return '\"\"' \n    else:\n        if string[0] == \"(\" or string[-1] == \")\":\n            if string[0] == \"(\" and string[-1] != \")\":\n                return string[1:] - extractor(string[:-1])\n            if string[0] != \"(\" and string[-1] == \")\":\n                return string[:-1] - extractor(string[1:])\n    return extractor(string[1:-1])\n            \n\nprint(extractor(\"My country (of origin) is Canada\"))\n", "fix": "def extractor(str):\n    if len(str) <= 2:\n        return '\"\"' \n    else:\n        if str[0] == \"(\" or str[-1] == \")\":\n            if str[0] == \"(\" and str[-1] != \")\":\n                return str[1:] - extractor(str[:-1])\n            if str[0] != \"(\" and str[-1] == \")\":\n                return str[:-1] + extractor(str[1:])\n    return extractor(str[1:-1])\n            \n\nprint(extractor(\"My country (of origin) is Canada\"))\n", "index": 1562777, "fixIndex": 1562788, "pyVersion": 3, "exceptionSpan": [9, 24, 9, 58], "spanSlice": [[1, 1, 10, 34], [2, 8, 2, 10], [2, 12, 2, 17], [2, 8, 2, 18], [2, 23, 2, 23], [2, 8, 2, 23], [2, 5, 9, 58], [5, 19, 5, 19], [5, 12, 5, 20], [5, 25, 5, 27], [5, 12, 5, 27], [5, 40, 5, 40], [5, 39, 5, 40], [5, 32, 5, 41], [5, 46, 5, 48], [5, 32, 5, 48], [5, 12, 5, 48], [5, 9, 9, 58], [8, 16, 8, 24], [8, 29, 8, 31], [8, 16, 8, 31], [8, 37, 8, 46], [8, 51, 8, 53], [8, 37, 8, 53], [8, 16, 8, 53], [8, 13, 9, 58], [9, 38, 9, 46], [9, 38, 9, 58], [9, 24, 9, 58], [10, 12, 10, 20], [10, 12, 10, 34], [13, 7, 13, 15], [13, 17, 13, 50], [13, 7, 13, 51]], "varTypes": {}, "spanTypes": {"(13, 1, 13, 5)": "FUNCTION", "(13, 7, 13, 15)": "FUNCTION", "(13, 17, 13, 50)": "str", "(2, 8, 2, 10)": "FUNCTION", "(2, 12, 2, 17)": "str", "(2, 8, 2, 18)": "int", "(2, 23, 2, 23)": "int", "(2, 8, 2, 23)": "bool", "(5, 12, 5, 17)": "str", "(5, 19, 5, 19)": "int", "(5, 12, 5, 20)": "str", "(5, 25, 5, 27)": "str", "(5, 12, 5, 27)": "bool", "(5, 32, 5, 37)": "str", "(5, 40, 5, 40)": "int", "(5, 39, 5, 40)": "int", "(5, 32, 5, 41)": "str", "(5, 46, 5, 48)": "str", "(5, 32, 5, 48)": "bool", "(5, 12, 5, 48)": "bool", "(10, 12, 10, 20)": "FUNCTION", "(6, 16, 6, 21)": "str", "(6, 23, 6, 23)": "int", "(6, 16, 6, 24)": "str", "(6, 29, 6, 31)": "str", "(6, 16, 6, 31)": "bool", "(6, 37, 6, 42)": "str", "(6, 45, 6, 45)": "int", "(6, 44, 6, 45)": "int", "(6, 37, 6, 46)": "str", "(6, 51, 6, 53)": "str", "(6, 37, 6, 53)": "bool", "(6, 16, 6, 53)": "bool", "(8, 16, 8, 21)": "str", "(8, 23, 8, 23)": "int", "(8, 16, 8, 24)": "str", "(8, 29, 8, 31)": "str", "(8, 16, 8, 31)": "bool", "(8, 37, 8, 42)": "str", "(8, 45, 8, 45)": "int", "(8, 44, 8, 45)": "int", "(8, 37, 8, 46)": "str", "(8, 51, 8, 53)": "str", "(8, 37, 8, 53)": "bool", "(8, 16, 8, 53)": "bool", "(9, 38, 9, 46)": "FUNCTION", "(3, 16, 3, 19)": "str"}, "errMsg": "TypeError", "ud": {"(13, 7, 13, 15)": [[1, 1, 10, 34]], "(13, 7, 13, 51)": [[1, 1, 10, 34]], "(2, 12, 2, 17)": [[10, 12, 10, 34], [5, 12, 5, 20]], "(2, 8, 2, 18)": [[5, 12, 5, 20]], "(2, 8, 2, 23)": [[5, 40, 5, 40]], "(5, 12, 5, 17)": [[10, 12, 10, 34]], "(5, 12, 5, 20)": [[10, 12, 10, 34]], "(5, 32, 5, 37)": [[10, 12, 10, 34]], "(5, 32, 5, 41)": [[10, 12, 10, 34]], "(5, 12, 5, 48)": [[2, 8, 2, 23]], "(5, 9, 9, 58)": [[2, 8, 2, 23]], "(10, 12, 10, 20)": [[1, 1, 10, 34]], "(10, 12, 10, 34)": [[5, 12, 5, 20]], "(6, 16, 6, 21)": [[9, 38, 9, 58]], "(6, 16, 6, 24)": [[9, 38, 9, 58], [5, 19, 5, 19]], "(6, 16, 6, 31)": [[5, 25, 5, 27]], "(6, 37, 6, 42)": [[9, 38, 9, 58]], "(6, 44, 6, 45)": [[5, 40, 5, 40]], "(6, 37, 6, 46)": [[5, 39, 5, 40], [9, 38, 9, 58]], "(6, 37, 6, 53)": [[5, 46, 5, 48]], "(6, 16, 6, 53)": [[2, 8, 2, 23], [5, 32, 5, 48]], "(6, 13, 7, 58)": [[2, 8, 2, 23]], "(8, 16, 8, 21)": [[9, 38, 9, 58]], "(8, 16, 8, 24)": [[9, 38, 9, 58], [5, 19, 5, 19]], "(8, 16, 8, 31)": [[5, 25, 5, 27]], "(8, 37, 8, 42)": [[9, 38, 9, 58]], "(8, 44, 8, 45)": [[5, 40, 5, 40]], "(8, 37, 8, 46)": [[5, 39, 5, 40], [9, 38, 9, 58]], "(8, 37, 8, 53)": [[5, 46, 5, 48]], "(8, 16, 8, 53)": [[2, 8, 2, 23], [5, 32, 5, 48]], "(8, 13, 9, 58)": [[2, 8, 2, 23]], "(9, 38, 9, 46)": [[1, 1, 10, 34]], "(9, 38, 9, 58)": [[1, 1, 10, 34], [10, 12, 10, 34]], "(9, 24, 9, 58)": [[5, 12, 5, 20]]}, "isConsecutive": true, "isFinal": true}
