{"bad": "def inversa (cadena):\n    invertida = \"\"\n    cont = len(cadena) + 1\n    while cont > 0:\n        invertida = invertida + cadena[cont]\n        cont = cont -1\n    return invertida\n    \ninversa (\"amarillo\")\n", "fix": "def inversa (cadena):\n    invertida = \"\"\n    cont = len(cadena) - 1\n    while cont >= 0:\n        invertida = cadena + cadena[cont]\n        cont = cont - 1\n    return invertida\n    \ninversa (\"Hola a todos\")\n\ndef inversaPos (cadena):\n    invertida = \"\"\n    cont = 0\n    while cont < len(cadena):\n        invertida =  cadena[cont] + invertida\n        cont = cont + 1\n    return invertida\ninversaPos (\"Hola a todos\")", "index": 4679870, "fixIndex": 4680088, "pyVersion": 3, "exceptionSpan": [5, 33, 5, 44], "spanSlice": [[1, 1, 7, 20], [3, 12, 3, 14], [3, 16, 3, 21], [3, 12, 3, 22], [3, 26, 3, 26], [3, 12, 3, 26], [3, 5, 3, 26], [4, 11, 4, 14], [4, 18, 4, 18], [4, 11, 4, 18], [4, 5, 6, 22], [5, 33, 5, 44], [9, 1, 9, 7], [9, 10, 9, 19], [9, 1, 9, 20]], "varTypes": {"invertida": "str", "cont": "int"}, "spanTypes": {"(9, 1, 9, 7)": "FUNCTION", "(9, 10, 9, 19)": "str", "(2, 17, 2, 18)": "str", "(3, 12, 3, 14)": "FUNCTION", "(3, 16, 3, 21)": "str", "(3, 12, 3, 22)": "int", "(3, 26, 3, 26)": "int", "(3, 12, 3, 26)": "int", "(4, 11, 4, 14)": "int", "(4, 18, 4, 18)": "int", "(4, 11, 4, 18)": "bool", "(5, 21, 5, 29)": "str", "(5, 33, 5, 38)": "str", "(5, 40, 5, 43)": "int"}, "errMsg": "IndexError", "ud": {"(9, 1, 9, 7)": [[1, 1, 7, 20]], "(9, 1, 9, 20)": [[1, 1, 7, 20]], "(3, 16, 3, 21)": [[9, 10, 9, 19], [9, 1, 9, 20]], "(3, 12, 3, 22)": [[9, 10, 9, 19]], "(4, 11, 4, 14)": [[3, 5, 3, 26], [3, 12, 3, 26]], "(4, 11, 4, 18)": [[3, 12, 3, 26]], "(5, 21, 5, 29)": [[2, 17, 2, 18], [2, 5, 2, 18]], "(5, 33, 5, 38)": [[9, 10, 9, 19], [9, 1, 9, 20]], "(5, 40, 5, 43)": [[3, 5, 3, 26], [3, 12, 3, 26]], "(5, 33, 5, 44)": [[9, 10, 9, 19], [3, 12, 3, 26]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def inversa (cadena):\n    invertida = \"\"\n    cont = len(cadena) + 1\n    while cont >= 0:\n        invertida = invertida + cadena[cont]\n        cont = cont\n    return invertida\n    \ninversa (\"amarillo\")\n", "fix": "def inversa (cadena):\n    invertida = \"\"\n    cont = len(cadena) - 1\n    while cont >= 0:\n        invertida = cadena + cadena[cont]\n        cont = cont - 1\n    return invertida\n    \ninversa (\"Hola a todos\")\n\ndef inversaPos (cadena):\n    invertida = \"\"\n    cont = 0\n    while cont < len(cadena):\n        invertida =  cadena[cont] + invertida\n        cont = cont + 1\n    return invertida\ninversaPos (\"Hola a todos\")", "index": 4679884, "fixIndex": 4680088, "pyVersion": 3, "exceptionSpan": [5, 33, 5, 44], "spanSlice": [[1, 1, 7, 20], [3, 12, 3, 14], [3, 16, 3, 21], [3, 12, 3, 22], [3, 26, 3, 26], [3, 12, 3, 26], [3, 5, 3, 26], [4, 11, 4, 14], [4, 19, 4, 19], [4, 11, 4, 19], [4, 5, 6, 19], [5, 33, 5, 44], [9, 1, 9, 7], [9, 10, 9, 19], [9, 1, 9, 20]], "varTypes": {"invertida": "str", "cont": "int"}, "spanTypes": {"(9, 1, 9, 7)": "FUNCTION", "(9, 10, 9, 19)": "str", "(2, 17, 2, 18)": "str", "(3, 12, 3, 14)": "FUNCTION", "(3, 16, 3, 21)": "str", "(3, 12, 3, 22)": "int", "(3, 26, 3, 26)": "int", "(3, 12, 3, 26)": "int", "(4, 11, 4, 14)": "int", "(4, 19, 4, 19)": "int", "(4, 11, 4, 19)": "bool", "(5, 21, 5, 29)": "str", "(5, 33, 5, 38)": "str", "(5, 40, 5, 43)": "int"}, "errMsg": "IndexError", "ud": {"(9, 1, 9, 7)": [[1, 1, 7, 20]], "(9, 1, 9, 20)": [[1, 1, 7, 20]], "(3, 16, 3, 21)": [[9, 10, 9, 19], [9, 1, 9, 20]], "(3, 12, 3, 22)": [[9, 10, 9, 19]], "(4, 11, 4, 14)": [[3, 5, 3, 26], [3, 12, 3, 26]], "(4, 11, 4, 19)": [[3, 12, 3, 26]], "(5, 21, 5, 29)": [[2, 17, 2, 18], [2, 5, 2, 18]], "(5, 33, 5, 38)": [[9, 10, 9, 19], [9, 1, 9, 20]], "(5, 40, 5, 43)": [[3, 5, 3, 26], [3, 12, 3, 26]], "(5, 33, 5, 44)": [[9, 10, 9, 19], [3, 12, 3, 26]]}, "isConsecutive": true, "isFinal": true}
