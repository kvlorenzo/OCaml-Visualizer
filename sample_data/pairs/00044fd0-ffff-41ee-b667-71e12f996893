{"bad": "lis=[]\nz=input().split()\nlis+=[[z[0],set(z[1:])]]\nwhile True:\n    x=input().split()\n    if len(x)==1:\n        break\n    for a in lis:\n        if a[0]==x[0]:\n            a[1].add(x[1:])\n    print(\"sd\")\nprint(lis)\n", "fix": "height=[int(x) for x in input().split()]\nheight.sort()\nh=int(input())\nif h<height[0]:\n    print(\"Too short\")\nelse:\n    if h>height[-1]:\n        print(\"Too tall\")\n    else:\n        i=0\n        p=100.0\n        while i<len(height):\n            if height[i]>h:\n                p=i*(100/len(height))\n            i+=1\n        print(str(p)+\"th percentile\")\n        \n", "index": 5114375, "fixIndex": 5181561, "pyVersion": 3, "exceptionSpan": [10, 13, 10, 27], "spanSlice": [[1, 5, 1, 6], [1, 1, 1, 6], [2, 3, 2, 7], [2, 3, 2, 9], [2, 3, 2, 15], [2, 3, 2, 17], [3, 10, 3, 10], [3, 8, 3, 11], [3, 13, 3, 15], [3, 13, 3, 22], [3, 7, 3, 23], [3, 6, 3, 24], [3, 1, 3, 24], [4, 7, 4, 10], [4, 1, 11, 15], [5, 7, 5, 11], [5, 7, 5, 13], [5, 7, 5, 19], [5, 7, 5, 21], [5, 5, 5, 21], [6, 8, 6, 10], [6, 12, 6, 12], [6, 8, 6, 13], [6, 16, 6, 16], [6, 8, 6, 16], [6, 5, 7, 13], [8, 14, 8, 16], [8, 5, 10, 27], [9, 12, 9, 15], [9, 18, 9, 21], [9, 12, 9, 21], [9, 9, 10, 27], [10, 13, 10, 20], [10, 13, 10, 27]], "varTypes": {"lis": "LIST", "z": "LIST", "x": "LIST"}, "spanTypes": {"(1, 5, 1, 6)": "LIST", "(2, 3, 2, 7)": "FUNCTION", "(2, 3, 2, 9)": "str", "(2, 3, 2, 15)": "FUNCTION", "(2, 3, 2, 17)": "LIST", "(3, 8, 3, 8)": "LIST", "(3, 10, 3, 10)": "int", "(3, 8, 3, 11)": "str", "(3, 13, 3, 15)": "CLASS", "(3, 13, 3, 22)": "SET", "(3, 7, 3, 23)": "LIST", "(3, 6, 3, 24)": "LIST", "(4, 7, 4, 10)": "bool", "(5, 7, 5, 11)": "FUNCTION", "(5, 7, 5, 13)": "str", "(5, 7, 5, 19)": "FUNCTION", "(5, 7, 5, 21)": "LIST", "(6, 8, 6, 10)": "FUNCTION", "(6, 12, 6, 12)": "LIST", "(6, 8, 6, 13)": "int", "(6, 16, 6, 16)": "int", "(6, 8, 6, 16)": "bool", "(8, 14, 8, 16)": "LIST", "(9, 12, 9, 12)": "LIST", "(9, 14, 9, 14)": "int", "(9, 12, 9, 15)": "str", "(9, 18, 9, 18)": "LIST", "(9, 20, 9, 20)": "int", "(9, 18, 9, 21)": "str", "(9, 12, 9, 21)": "bool", "(10, 13, 10, 13)": "LIST", "(10, 15, 10, 15)": "int", "(10, 13, 10, 16)": "SET", "(10, 13, 10, 20)": "FUNCTION"}, "errMsg": "TypeError", "ud": {"(3, 8, 3, 8)": [[2, 3, 2, 17], [2, 1, 2, 17]], "(3, 8, 3, 11)": [[2, 3, 2, 17]], "(3, 13, 3, 22)": [[2, 3, 2, 17]], "(3, 7, 3, 23)": [[2, 3, 2, 17]], "(3, 1, 3, 24)": [[1, 1, 1, 6], [1, 5, 1, 6]], "(5, 7, 5, 13)": [[2, 3, 2, 7]], "(6, 12, 6, 12)": [[5, 5, 5, 21], [5, 7, 5, 21]], "(6, 8, 6, 13)": [[5, 7, 5, 21]], "(8, 14, 8, 16)": [[1, 1, 1, 6], [3, 1, 3, 24]], "(8, 5, 10, 27)": [[3, 1, 3, 24]], "(9, 12, 9, 12)": [[8, 5, 10, 27], [3, 7, 3, 23]], "(9, 12, 9, 15)": [[3, 10, 3, 10], [3, 7, 3, 23], [2, 3, 2, 17]], "(9, 18, 9, 18)": [[5, 5, 5, 21], [5, 7, 5, 21]], "(9, 18, 9, 21)": [[3, 10, 3, 10], [5, 7, 5, 21]], "(9, 12, 9, 21)": [[2, 3, 2, 17], [5, 7, 5, 21]], "(9, 9, 10, 27)": [[4, 7, 4, 10]], "(10, 13, 10, 13)": [[8, 5, 10, 27], [3, 7, 3, 23]], "(10, 13, 10, 16)": [[3, 7, 3, 23], [3, 13, 3, 22], [6, 16, 6, 16]], "(10, 13, 10, 20)": [[3, 13, 3, 22]], "(10, 13, 10, 27)": [[5, 7, 5, 21]]}, "isConsecutive": true, "isFinal": false}
{"bad": "n=int(input())\nvote=dict()\nfor a in range(n):\n    nn=[x for x in input().split(\",\")]\n    intania=nn[1]\n    num=nn[0]\n    if intania not in vote:\n        vote[intania]=set([num])\n    else:\n        print(vote[intania],num)\n        k=vote[intania]\n        vote[intania]=k.add(21)\nprint(vote)\n", "fix": "n=int(input())\nvote=dict()\nfor a in range(n):\n    nn=[x for x in input().split(\",\")]\n    intania=nn[1]\n    num=nn[0]\n    if intania not in vote:\n        vote[intania]=set([num])\n    else:\n        print(vote[intania],num)\n        k=vote[intania]\n        vote[intania]=k.add(21)\nprint(vote)\n", "index": 5183027, "fixIndex": 5183032, "pyVersion": 3, "exceptionSpan": [1, 3, 1, 14], "spanSlice": [[1, 3, 1, 5], [1, 7, 1, 11], [1, 7, 1, 13], [1, 3, 1, 14]], "varTypes": {}, "spanTypes": {"(1, 3, 1, 5)": "CLASS", "(1, 7, 1, 11)": "FUNCTION", "(1, 7, 1, 13)": "str"}, "errMsg": "ValueError", "ud": {}, "isConsecutive": true, "isFinal": true}
