{"bad": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\tfor row in puzzle:\n\t\tfor value in row:\n\t\t\tif value==None:\n\t\t\t\tvalue=\".\"\n\t\theader+=\"    [%d]\"%(value)\nget_board_string([3,1,2],[2,None,None],[None,None,None])", "fix": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"    [%d]\"%(num)\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "index": 1457212, "fixIndex": 1457246, "pyVersion": 3, "exceptionSpan": [10, 1, 10, 56], "spanSlice": [[1, 1, 9, 42], [10, 1, 10, 16], [10, 19, 10, 19], [10, 21, 10, 21], [10, 23, 10, 23], [10, 18, 10, 24], [10, 27, 10, 27], [10, 29, 10, 32], [10, 34, 10, 37], [10, 26, 10, 38], [10, 41, 10, 44], [10, 46, 10, 49], [10, 51, 10, 54], [10, 40, 10, 55], [10, 1, 10, 56]], "varTypes": {}, "spanTypes": {"(10, 1, 10, 16)": "FUNCTION", "(10, 19, 10, 19)": "int", "(10, 21, 10, 21)": "int", "(10, 23, 10, 23)": "int", "(10, 18, 10, 24)": "LIST", "(10, 27, 10, 27)": "int", "(10, 29, 10, 32)": "NoneType", "(10, 34, 10, 37)": "NoneType", "(10, 26, 10, 38)": "LIST", "(10, 41, 10, 44)": "NoneType", "(10, 46, 10, 49)": "NoneType", "(10, 51, 10, 54)": "NoneType", "(10, 40, 10, 55)": "LIST"}, "errMsg": "TypeError", "ud": {"(10, 1, 10, 16)": [[1, 1, 9, 42]], "(10, 26, 10, 38)": [[10, 23, 10, 23]], "(10, 40, 10, 55)": [[10, 29, 10, 32]], "(10, 1, 10, 56)": [[1, 1, 9, 42]]}, "isConsecutive": true, "isFinal": false}
{"bad": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+\"\\n\"\n\tline=\"\"\n\tfor row in puzzle:\n\t    for value in row:\n\t        line+=\"| %d \"% (value)\n\tline+=\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "fix": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+r\"\\n\"\n\tline=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    for value in puzzle[row_index]:\n\t        if value==None:\n\t            line+=\"| . \"\n\t        elif value!=None:\n\t            line+=\"| %d \"% (value)\n\t        \n\tline+=r\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "index": 1457306, "fixIndex": 1457397, "pyVersion": 3, "exceptionSpan": [13, 23, 13, 38], "spanSlice": [[1, 1, 16, 44], [11, 20, 11, 25], [11, 9, 13, 38], [12, 26, 12, 28], [12, 13, 13, 38], [13, 23, 13, 29], [13, 33, 13, 37], [13, 32, 13, 38], [13, 23, 13, 38], [17, 1, 17, 16], [17, 20, 17, 20], [17, 22, 17, 22], [17, 24, 17, 24], [17, 19, 17, 25], [17, 28, 17, 28], [17, 30, 17, 33], [17, 35, 17, 38], [17, 27, 17, 39], [17, 42, 17, 45], [17, 47, 17, 50], [17, 52, 17, 55], [17, 41, 17, 56], [17, 18, 17, 57], [17, 1, 17, 58]], "varTypes": {"num_rows": "int", "dashes": "str", "maxlength": "int", "header": "str", "num": "int", "hnewline": "str", "line": "str"}, "spanTypes": {"(17, 1, 17, 16)": "FUNCTION", "(17, 20, 17, 20)": "int", "(17, 22, 17, 22)": "int", "(17, 24, 17, 24)": "int", "(17, 19, 17, 25)": "LIST", "(17, 28, 17, 28)": "int", "(17, 30, 17, 33)": "NoneType", "(17, 35, 17, 38)": "NoneType", "(17, 27, 17, 39)": "LIST", "(17, 42, 17, 45)": "NoneType", "(17, 47, 17, 50)": "NoneType", "(17, 52, 17, 55)": "NoneType", "(17, 41, 17, 56)": "LIST", "(17, 18, 17, 57)": "LIST", "(2, 20, 2, 22)": "FUNCTION", "(2, 24, 2, 29)": "LIST", "(2, 20, 2, 30)": "int", "(3, 18, 3, 25)": "int", "(3, 17, 3, 26)": "int", "(3, 28, 3, 28)": "int", "(3, 17, 3, 28)": "int", "(3, 30, 3, 30)": "int", "(3, 17, 3, 30)": "int", "(3, 16, 3, 31)": "int", "(3, 33, 3, 35)": "str", "(3, 16, 3, 35)": "str", "(4, 19, 4, 21)": "FUNCTION", "(4, 23, 4, 28)": "LIST", "(4, 19, 4, 29)": "int", "(5, 16, 5, 17)": "str", "(6, 26, 6, 30)": "CLASS", "(6, 32, 6, 34)": "FUNCTION", "(6, 36, 6, 41)": "LIST", "(6, 32, 6, 42)": "int", "(6, 26, 6, 43)": "INSTANCE", "(7, 17, 7, 25)": "int", "(8, 21, 8, 26)": "str", "(8, 29, 8, 31)": "int", "(8, 28, 8, 32)": "int", "(8, 21, 8, 32)": "str", "(9, 18, 9, 23)": "str", "(9, 25, 9, 28)": "str", "(9, 18, 9, 28)": "str", "(10, 14, 10, 15)": "str", "(11, 20, 11, 25)": "LIST", "(12, 26, 12, 28)": "LIST", "(13, 23, 13, 29)": "str", "(13, 33, 13, 37)": "int,NoneType", "(13, 32, 13, 38)": "int,NoneType", "(13, 23, 13, 38)": "str"}, "errMsg": "TypeError", "ud": {"(17, 1, 17, 16)": [[1, 1, 16, 44]], "(17, 27, 17, 39)": [[17, 24, 17, 24]], "(17, 41, 17, 56)": [[17, 30, 17, 33]], "(17, 1, 17, 58)": [[1, 1, 16, 44]], "(2, 24, 2, 29)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(2, 20, 2, 30)": [[17, 18, 17, 57]], "(2, 9, 2, 30)": [[17, 20, 17, 20]], "(3, 18, 3, 25)": [[17, 20, 17, 20], [2, 9, 2, 30]], "(3, 17, 3, 26)": [[17, 20, 17, 20]], "(3, 17, 3, 28)": [[17, 20, 17, 20]], "(3, 17, 3, 30)": [[17, 24, 17, 24]], "(4, 23, 4, 28)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(4, 19, 4, 29)": [[17, 18, 17, 57], [2, 20, 2, 22]], "(4, 9, 4, 29)": [[17, 20, 17, 20]], "(6, 36, 6, 41)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(6, 32, 6, 42)": [[17, 18, 17, 57], [2, 20, 2, 22]], "(6, 26, 6, 43)": [[17, 20, 17, 20]], "(7, 17, 7, 25)": [[17, 24, 17, 24], [6, 9, 8, 32]], "(7, 13, 7, 25)": [[17, 24, 17, 24]], "(8, 29, 8, 31)": [[7, 13, 7, 25], [17, 24, 17, 24]], "(8, 28, 8, 32)": [[17, 24, 17, 24]], "(8, 21, 8, 32)": [[17, 24, 17, 24]], "(9, 18, 9, 23)": [[8, 13, 8, 32]], "(9, 18, 9, 28)": [[8, 13, 8, 32]], "(10, 9, 10, 15)": [[5, 16, 5, 17]], "(11, 20, 11, 25)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(11, 9, 13, 38)": [[17, 18, 17, 57]], "(12, 26, 12, 28)": [[17, 27, 17, 39], [11, 9, 13, 38]], "(12, 13, 13, 38)": [[17, 27, 17, 39]], "(13, 33, 13, 37)": [[12, 13, 13, 38], [17, 30, 17, 33]], "(13, 32, 13, 38)": [[17, 30, 17, 33]], "(13, 23, 13, 38)": [[17, 30, 17, 33]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+\"r\\n\"\n\tline=\"\"\n\tfor row in puzzle:\n\t    for value in row:\n\t        line+=\"| %d \"% (value)\n\tline+=\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "fix": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+r\"\\n\"\n\tline=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    for value in puzzle[row_index]:\n\t        if value==None:\n\t            line+=\"| . \"\n\t        elif value!=None:\n\t            line+=\"| %d \"% (value)\n\t        \n\tline+=r\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "index": 1457310, "fixIndex": 1457397, "pyVersion": 3, "exceptionSpan": [13, 23, 13, 38], "spanSlice": [[1, 1, 16, 44], [11, 20, 11, 25], [11, 9, 13, 38], [12, 26, 12, 28], [12, 13, 13, 38], [13, 23, 13, 29], [13, 33, 13, 37], [13, 32, 13, 38], [13, 23, 13, 38], [17, 1, 17, 16], [17, 20, 17, 20], [17, 22, 17, 22], [17, 24, 17, 24], [17, 19, 17, 25], [17, 28, 17, 28], [17, 30, 17, 33], [17, 35, 17, 38], [17, 27, 17, 39], [17, 42, 17, 45], [17, 47, 17, 50], [17, 52, 17, 55], [17, 41, 17, 56], [17, 18, 17, 57], [17, 1, 17, 58]], "varTypes": {"num_rows": "int", "dashes": "str", "maxlength": "int", "header": "str", "num": "int", "hnewline": "str", "line": "str"}, "spanTypes": {"(17, 1, 17, 16)": "FUNCTION", "(17, 20, 17, 20)": "int", "(17, 22, 17, 22)": "int", "(17, 24, 17, 24)": "int", "(17, 19, 17, 25)": "LIST", "(17, 28, 17, 28)": "int", "(17, 30, 17, 33)": "NoneType", "(17, 35, 17, 38)": "NoneType", "(17, 27, 17, 39)": "LIST", "(17, 42, 17, 45)": "NoneType", "(17, 47, 17, 50)": "NoneType", "(17, 52, 17, 55)": "NoneType", "(17, 41, 17, 56)": "LIST", "(17, 18, 17, 57)": "LIST", "(2, 20, 2, 22)": "FUNCTION", "(2, 24, 2, 29)": "LIST", "(2, 20, 2, 30)": "int", "(3, 18, 3, 25)": "int", "(3, 17, 3, 26)": "int", "(3, 28, 3, 28)": "int", "(3, 17, 3, 28)": "int", "(3, 30, 3, 30)": "int", "(3, 17, 3, 30)": "int", "(3, 16, 3, 31)": "int", "(3, 33, 3, 35)": "str", "(3, 16, 3, 35)": "str", "(4, 19, 4, 21)": "FUNCTION", "(4, 23, 4, 28)": "LIST", "(4, 19, 4, 29)": "int", "(5, 16, 5, 17)": "str", "(6, 26, 6, 30)": "CLASS", "(6, 32, 6, 34)": "FUNCTION", "(6, 36, 6, 41)": "LIST", "(6, 32, 6, 42)": "int", "(6, 26, 6, 43)": "INSTANCE", "(7, 17, 7, 25)": "int", "(8, 21, 8, 26)": "str", "(8, 29, 8, 31)": "int", "(8, 28, 8, 32)": "int", "(8, 21, 8, 32)": "str", "(9, 18, 9, 23)": "str", "(9, 25, 9, 29)": "str", "(9, 18, 9, 29)": "str", "(10, 14, 10, 15)": "str", "(11, 20, 11, 25)": "LIST", "(12, 26, 12, 28)": "LIST", "(13, 23, 13, 29)": "str", "(13, 33, 13, 37)": "int,NoneType", "(13, 32, 13, 38)": "int,NoneType", "(13, 23, 13, 38)": "str"}, "errMsg": "TypeError", "ud": {"(17, 1, 17, 16)": [[1, 1, 16, 44]], "(17, 27, 17, 39)": [[17, 24, 17, 24]], "(17, 41, 17, 56)": [[17, 30, 17, 33]], "(17, 1, 17, 58)": [[1, 1, 16, 44]], "(2, 24, 2, 29)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(2, 20, 2, 30)": [[17, 18, 17, 57]], "(2, 9, 2, 30)": [[17, 20, 17, 20]], "(3, 18, 3, 25)": [[17, 20, 17, 20], [2, 9, 2, 30]], "(3, 17, 3, 26)": [[17, 20, 17, 20]], "(3, 17, 3, 28)": [[17, 20, 17, 20]], "(3, 17, 3, 30)": [[17, 24, 17, 24]], "(4, 23, 4, 28)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(4, 19, 4, 29)": [[17, 18, 17, 57], [2, 20, 2, 22]], "(4, 9, 4, 29)": [[17, 20, 17, 20]], "(6, 36, 6, 41)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(6, 32, 6, 42)": [[17, 18, 17, 57], [2, 20, 2, 22]], "(6, 26, 6, 43)": [[17, 20, 17, 20]], "(7, 17, 7, 25)": [[17, 24, 17, 24], [6, 9, 8, 32]], "(7, 13, 7, 25)": [[17, 24, 17, 24]], "(8, 29, 8, 31)": [[7, 13, 7, 25], [17, 24, 17, 24]], "(8, 28, 8, 32)": [[17, 24, 17, 24]], "(8, 21, 8, 32)": [[17, 24, 17, 24]], "(9, 18, 9, 23)": [[8, 13, 8, 32]], "(9, 18, 9, 29)": [[8, 13, 8, 32]], "(10, 9, 10, 15)": [[5, 16, 5, 17]], "(11, 20, 11, 25)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(11, 9, 13, 38)": [[17, 18, 17, 57]], "(12, 26, 12, 28)": [[17, 27, 17, 39], [11, 9, 13, 38]], "(12, 13, 13, 38)": [[17, 27, 17, 39]], "(13, 33, 13, 37)": [[12, 13, 13, 38], [17, 30, 17, 33]], "(13, 32, 13, 38)": [[17, 30, 17, 33]], "(13, 23, 13, 38)": [[17, 30, 17, 33]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+r\"\\n\"\n\tline=\"\"\n\tfor row in puzzle:\n\t    for value in row:\n\t        line+=\"| %d \"% (value)\n\tline+=\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "fix": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+r\"\\n\"\n\tline=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    for value in puzzle[row_index]:\n\t        if value==None:\n\t            line+=\"| . \"\n\t        elif value!=None:\n\t            line+=\"| %d \"% (value)\n\t        \n\tline+=r\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "index": 1457318, "fixIndex": 1457397, "pyVersion": 3, "exceptionSpan": [13, 23, 13, 38], "spanSlice": [[1, 1, 16, 44], [11, 20, 11, 25], [11, 9, 13, 38], [12, 26, 12, 28], [12, 13, 13, 38], [13, 23, 13, 29], [13, 33, 13, 37], [13, 32, 13, 38], [13, 23, 13, 38], [17, 1, 17, 16], [17, 20, 17, 20], [17, 22, 17, 22], [17, 24, 17, 24], [17, 19, 17, 25], [17, 28, 17, 28], [17, 30, 17, 33], [17, 35, 17, 38], [17, 27, 17, 39], [17, 42, 17, 45], [17, 47, 17, 50], [17, 52, 17, 55], [17, 41, 17, 56], [17, 18, 17, 57], [17, 1, 17, 58]], "varTypes": {"num_rows": "int", "dashes": "str", "maxlength": "int", "header": "str", "num": "int", "hnewline": "str", "line": "str"}, "spanTypes": {"(17, 1, 17, 16)": "FUNCTION", "(17, 20, 17, 20)": "int", "(17, 22, 17, 22)": "int", "(17, 24, 17, 24)": "int", "(17, 19, 17, 25)": "LIST", "(17, 28, 17, 28)": "int", "(17, 30, 17, 33)": "NoneType", "(17, 35, 17, 38)": "NoneType", "(17, 27, 17, 39)": "LIST", "(17, 42, 17, 45)": "NoneType", "(17, 47, 17, 50)": "NoneType", "(17, 52, 17, 55)": "NoneType", "(17, 41, 17, 56)": "LIST", "(17, 18, 17, 57)": "LIST", "(2, 20, 2, 22)": "FUNCTION", "(2, 24, 2, 29)": "LIST", "(2, 20, 2, 30)": "int", "(3, 18, 3, 25)": "int", "(3, 17, 3, 26)": "int", "(3, 28, 3, 28)": "int", "(3, 17, 3, 28)": "int", "(3, 30, 3, 30)": "int", "(3, 17, 3, 30)": "int", "(3, 16, 3, 31)": "int", "(3, 33, 3, 35)": "str", "(3, 16, 3, 35)": "str", "(4, 19, 4, 21)": "FUNCTION", "(4, 23, 4, 28)": "LIST", "(4, 19, 4, 29)": "int", "(5, 16, 5, 17)": "str", "(6, 26, 6, 30)": "CLASS", "(6, 32, 6, 34)": "FUNCTION", "(6, 36, 6, 41)": "LIST", "(6, 32, 6, 42)": "int", "(6, 26, 6, 43)": "INSTANCE", "(7, 17, 7, 25)": "int", "(8, 21, 8, 26)": "str", "(8, 29, 8, 31)": "int", "(8, 28, 8, 32)": "int", "(8, 21, 8, 32)": "str", "(9, 18, 9, 23)": "str", "(9, 25, 9, 29)": "str", "(9, 18, 9, 29)": "str", "(10, 14, 10, 15)": "str", "(11, 20, 11, 25)": "LIST", "(12, 26, 12, 28)": "LIST", "(13, 23, 13, 29)": "str", "(13, 33, 13, 37)": "int,NoneType", "(13, 32, 13, 38)": "int,NoneType", "(13, 23, 13, 38)": "str"}, "errMsg": "TypeError", "ud": {"(17, 1, 17, 16)": [[1, 1, 16, 44]], "(17, 27, 17, 39)": [[17, 24, 17, 24]], "(17, 41, 17, 56)": [[17, 30, 17, 33]], "(17, 1, 17, 58)": [[1, 1, 16, 44]], "(2, 24, 2, 29)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(2, 20, 2, 30)": [[17, 18, 17, 57]], "(2, 9, 2, 30)": [[17, 20, 17, 20]], "(3, 18, 3, 25)": [[17, 20, 17, 20], [2, 9, 2, 30]], "(3, 17, 3, 26)": [[17, 20, 17, 20]], "(3, 17, 3, 28)": [[17, 20, 17, 20]], "(3, 17, 3, 30)": [[17, 24, 17, 24]], "(4, 23, 4, 28)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(4, 19, 4, 29)": [[17, 18, 17, 57], [2, 20, 2, 22]], "(4, 9, 4, 29)": [[17, 20, 17, 20]], "(6, 36, 6, 41)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(6, 32, 6, 42)": [[17, 18, 17, 57], [2, 20, 2, 22]], "(6, 26, 6, 43)": [[17, 20, 17, 20]], "(7, 17, 7, 25)": [[17, 24, 17, 24], [6, 9, 8, 32]], "(7, 13, 7, 25)": [[17, 24, 17, 24]], "(8, 29, 8, 31)": [[7, 13, 7, 25], [17, 24, 17, 24]], "(8, 28, 8, 32)": [[17, 24, 17, 24]], "(8, 21, 8, 32)": [[17, 24, 17, 24]], "(9, 18, 9, 23)": [[8, 13, 8, 32]], "(9, 18, 9, 29)": [[8, 13, 8, 32]], "(10, 9, 10, 15)": [[5, 16, 5, 17]], "(11, 20, 11, 25)": [[17, 18, 17, 57], [17, 1, 17, 58]], "(11, 9, 13, 38)": [[17, 18, 17, 57]], "(12, 26, 12, 28)": [[17, 27, 17, 39], [11, 9, 13, 38]], "(12, 13, 13, 38)": [[17, 27, 17, 39]], "(13, 33, 13, 37)": [[12, 13, 13, 38], [17, 30, 17, 33]], "(13, 32, 13, 38)": [[17, 30, 17, 33]], "(13, 23, 13, 38)": [[17, 30, 17, 33]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+r\"\\n\"\n\tline=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    for value[row_index] in row_index:\n\t        if value==None:\n\t            line+=\"| . \"\n\t        elif value!=None:\n\t            line+=\"| %d \"% (value)\n\t        \n\tline+=r\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "fix": "def get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+r\"\\n\"\n\tline=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    for value in puzzle[row_index]:\n\t        if value==None:\n\t            line+=\"| . \"\n\t        elif value!=None:\n\t            line+=\"| %d \"% (value)\n\t        \n\tline+=r\"\\n|\"\n\t   \n\tstring=\"    \"+hnewline+\"    \"+dashes\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])", "index": 1457341, "fixIndex": 1457397, "pyVersion": 3, "exceptionSpan": [12, 13, 16, 42], "spanSlice": [[1, 1, 20, 44], [2, 20, 2, 22], [6, 26, 6, 30], [11, 26, 11, 30], [11, 32, 11, 34], [11, 36, 11, 41], [11, 32, 11, 42], [11, 26, 11, 43], [11, 9, 16, 42], [12, 37, 12, 45], [12, 13, 16, 42], [21, 1, 21, 16], [21, 20, 21, 20], [21, 22, 21, 22], [21, 24, 21, 24], [21, 19, 21, 25], [21, 28, 21, 28], [21, 30, 21, 33], [21, 35, 21, 38], [21, 27, 21, 39], [21, 42, 21, 45], [21, 47, 21, 50], [21, 52, 21, 55], [21, 41, 21, 56], [21, 18, 21, 57], [21, 1, 21, 58]], "varTypes": {"num_rows": "int", "dashes": "str", "maxlength": "int", "header": "str", "num": "int", "hnewline": "str", "line": "str"}, "spanTypes": {"(21, 1, 21, 16)": "FUNCTION", "(21, 20, 21, 20)": "int", "(21, 22, 21, 22)": "int", "(21, 24, 21, 24)": "int", "(21, 19, 21, 25)": "LIST", "(21, 28, 21, 28)": "int", "(21, 30, 21, 33)": "NoneType", "(21, 35, 21, 38)": "NoneType", "(21, 27, 21, 39)": "LIST", "(21, 42, 21, 45)": "NoneType", "(21, 47, 21, 50)": "NoneType", "(21, 52, 21, 55)": "NoneType", "(21, 41, 21, 56)": "LIST", "(21, 18, 21, 57)": "LIST", "(2, 20, 2, 22)": "FUNCTION", "(2, 24, 2, 29)": "LIST", "(2, 20, 2, 30)": "int", "(3, 18, 3, 25)": "int", "(3, 17, 3, 26)": "int", "(3, 28, 3, 28)": "int", "(3, 17, 3, 28)": "int", "(3, 30, 3, 30)": "int", "(3, 17, 3, 30)": "int", "(3, 16, 3, 31)": "int", "(3, 33, 3, 35)": "str", "(3, 16, 3, 35)": "str", "(4, 19, 4, 21)": "FUNCTION", "(4, 23, 4, 28)": "LIST", "(4, 19, 4, 29)": "int", "(5, 16, 5, 17)": "str", "(6, 26, 6, 30)": "CLASS", "(6, 32, 6, 34)": "FUNCTION", "(6, 36, 6, 41)": "LIST", "(6, 32, 6, 42)": "int", "(6, 26, 6, 43)": "INSTANCE", "(7, 17, 7, 25)": "int", "(8, 21, 8, 26)": "str", "(8, 29, 8, 31)": "int", "(8, 28, 8, 32)": "int", "(8, 21, 8, 32)": "str", "(9, 18, 9, 23)": "str", "(9, 25, 9, 29)": "str", "(9, 18, 9, 29)": "str", "(10, 14, 10, 15)": "str", "(11, 26, 11, 30)": "CLASS", "(11, 32, 11, 34)": "FUNCTION", "(11, 36, 11, 41)": "LIST", "(11, 32, 11, 42)": "int", "(11, 26, 11, 43)": "INSTANCE", "(12, 37, 12, 45)": "int"}, "errMsg": "TypeError", "ud": {"(21, 1, 21, 16)": [[1, 1, 20, 44]], "(21, 27, 21, 39)": [[21, 24, 21, 24]], "(21, 41, 21, 56)": [[21, 30, 21, 33]], "(21, 1, 21, 58)": [[1, 1, 20, 44]], "(2, 24, 2, 29)": [[21, 18, 21, 57], [21, 1, 21, 58]], "(2, 20, 2, 30)": [[21, 18, 21, 57]], "(2, 9, 2, 30)": [[21, 20, 21, 20]], "(3, 18, 3, 25)": [[21, 20, 21, 20], [2, 9, 2, 30]], "(3, 17, 3, 26)": [[21, 20, 21, 20]], "(3, 17, 3, 28)": [[21, 20, 21, 20]], "(3, 17, 3, 30)": [[21, 24, 21, 24]], "(4, 23, 4, 28)": [[21, 18, 21, 57], [21, 1, 21, 58]], "(4, 19, 4, 29)": [[21, 18, 21, 57], [2, 20, 2, 22]], "(4, 9, 4, 29)": [[21, 20, 21, 20]], "(6, 36, 6, 41)": [[21, 18, 21, 57], [21, 1, 21, 58]], "(6, 32, 6, 42)": [[21, 18, 21, 57], [2, 20, 2, 22]], "(6, 26, 6, 43)": [[21, 20, 21, 20]], "(7, 17, 7, 25)": [[21, 24, 21, 24], [6, 9, 8, 32]], "(7, 13, 7, 25)": [[21, 24, 21, 24]], "(8, 29, 8, 31)": [[7, 13, 7, 25], [21, 24, 21, 24]], "(8, 28, 8, 32)": [[21, 24, 21, 24]], "(8, 21, 8, 32)": [[21, 24, 21, 24]], "(9, 18, 9, 23)": [[8, 13, 8, 32]], "(9, 18, 9, 29)": [[8, 13, 8, 32]], "(10, 9, 10, 15)": [[5, 16, 5, 17]], "(11, 36, 11, 41)": [[21, 18, 21, 57], [21, 1, 21, 58]], "(11, 32, 11, 42)": [[21, 18, 21, 57], [2, 20, 2, 22]], "(11, 26, 11, 43)": [[21, 20, 21, 20], [6, 26, 6, 30]], "(12, 37, 12, 45)": [[11, 9, 16, 42]], "(12, 13, 16, 42)": [[11, 9, 16, 42]]}, "isConsecutive": true, "isFinal": false}
{"bad": "def get_size(puzzle):\n\tsize=len(puzzle)\n\treturn size\n    \ndef get_board_string(puzzle):\n\tnum_rows = len(puzzle)\n\tdashes=((num_rows)*4+2)-1*\"-\"\n\tmaxlength=len(puzzle)\n\theader=\"\"\n\tfor row_index in range(len(puzzle)):\n\t    num=row_index\n\t    header+=\"[%d]\"%(num)\n\thnewline=header+\"\\n\"\n\tline=\"\\n\"\n\tvalue_index=0\n\tfor row_index in range(len(puzzle)):\n\t    for value in puzzle[row_index]:\n\t        row=puzzle[row_index]\n\t        if value_index==0:\n\t            line+=\"[%d] \"% (row_index)\n\t        if value==None:\n\t            line+=\"| . \"\n\t        if value!=None:\n\t            line+=\"| %d \"% (value)\n\t        if value_index==get_size(puzzle)-1:\n\t            line+=\"|\\n\"\n\t            value_index=-1\n\t        value_index+=1\n\t        \n\tstring=\"    \"+hnewline+\"    \"+dashes+line+\"    \"+dashes\n\tstr='     [0] [1] [2]\\n    -------------\\n[0] | 3 | . | 2 |\\n[1] | 2 | 3 | . |\\n[2] | . | 2 | . |\\n    -------------'\n\treturn string\n\treturn str\nget_board_string([[3,1,2],[2,None,None],[None,None,None]])\n\t\n\t", "fix": "def get_missing_numbers_rows_or_col(xs):\n\tlist=[]\n\tnewlist=[]\n\txs=xs\n\tlength_col=len(puzzle)\n\tfor i in range(len(xs)):\n\t\tlist.append(i)\n\tfor x in list:\n\t    for value in xs:\n\t        if value!=None:\n\t            if value!=x:\n\t                return value\n\t\n\treturn newlist\n\nxs=[2,1,None]\n\t\n\t", "index": 1457741, "fixIndex": 1458097, "pyVersion": 3, "exceptionSpan": [7, 16, 7, 37], "spanSlice": [[34, 24, 34, 24], [34, 19, 34, 25], [34, 28, 34, 28], [34, 30, 34, 33], [34, 35, 34, 38], [34, 27, 34, 39], [34, 42, 34, 45], [34, 47, 34, 50], [5, 1, 33, 18], [34, 52, 34, 55], [34, 41, 34, 56], [34, 18, 34, 57], [34, 1, 34, 58], [6, 20, 6, 22], [6, 24, 6, 29], [6, 20, 6, 30], [6, 9, 6, 30], [7, 18, 7, 25], [7, 17, 7, 26], [7, 28, 7, 28], [7, 17, 7, 28], [7, 30, 7, 30], [7, 17, 7, 30], [7, 16, 7, 31], [7, 33, 7, 33], [7, 35, 7, 37], [7, 33, 7, 37], [7, 16, 7, 37], [34, 1, 34, 16], [34, 20, 34, 20], [34, 22, 34, 22]], "varTypes": {"num_rows": "int"}, "spanTypes": {"(34, 1, 34, 16)": "FUNCTION", "(34, 20, 34, 20)": "int", "(34, 22, 34, 22)": "int", "(34, 24, 34, 24)": "int", "(34, 19, 34, 25)": "LIST", "(34, 28, 34, 28)": "int", "(34, 30, 34, 33)": "NoneType", "(34, 35, 34, 38)": "NoneType", "(34, 27, 34, 39)": "LIST", "(34, 42, 34, 45)": "NoneType", "(34, 47, 34, 50)": "NoneType", "(34, 52, 34, 55)": "NoneType", "(34, 41, 34, 56)": "LIST", "(34, 18, 34, 57)": "LIST", "(6, 20, 6, 22)": "FUNCTION", "(6, 24, 6, 29)": "LIST", "(6, 20, 6, 30)": "int", "(7, 18, 7, 25)": "int", "(7, 17, 7, 26)": "int", "(7, 28, 7, 28)": "int", "(7, 17, 7, 28)": "int", "(7, 30, 7, 30)": "int", "(7, 17, 7, 30)": "int", "(7, 16, 7, 31)": "int", "(7, 33, 7, 33)": "int", "(7, 35, 7, 37)": "str", "(7, 33, 7, 37)": "str"}, "errMsg": "TypeError", "ud": {"(34, 1, 34, 16)": [[5, 1, 33, 18]], "(34, 27, 34, 39)": [[34, 24, 34, 24]], "(34, 41, 34, 56)": [[34, 30, 34, 33]], "(34, 1, 34, 58)": [[5, 1, 33, 18]], "(6, 24, 6, 29)": [[34, 1, 34, 58], [34, 18, 34, 57]], "(6, 20, 6, 30)": [[34, 18, 34, 57]], "(6, 9, 6, 30)": [[34, 20, 34, 20]], "(7, 18, 7, 25)": [[6, 9, 6, 30], [34, 20, 34, 20]], "(7, 17, 7, 26)": [[34, 20, 34, 20]], "(7, 17, 7, 28)": [[34, 20, 34, 20]], "(7, 17, 7, 30)": [[34, 24, 34, 24]], "(7, 33, 7, 37)": [[34, 22, 34, 22]]}, "isConsecutive": true, "isFinal": true}
