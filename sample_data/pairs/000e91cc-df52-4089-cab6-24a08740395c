{"bad": "def findDisappearedNumbers( nums):\n    nums1=list(set(nums))\n    j=1\n    i=0\n    list1=[]\n    while j<len(nums):\n        if nums1[i]==j:\n            i+=1\n            j+=1\n        elif nums1[i]>j:\n            list1.append(j)\n            j+=1 \n        if j==len(nums) and nums1[-1]!=j:\n            list1.append(j)\n    return list1\nfindDisappearedNumbers([4,3,2,6,6,2,3,2])\n", "fix": "def findDisappearedNumbers( nums):\n    nums1=list(set(nums))\n    j=1\n    i=0\n    list1=[]\n    while j<len(nums):\n        if nums1[i]==j:\n            i+=1\n            j+=1\n        elif nums1[i]>j:\n            list1.append(j)\n            j+=1 \n        if i==len(nums1) and nums1[-1]!=j:\n            list1.append(j)\n            j+=1\n    return list1\nfindDisappearedNumbers([4,3,2,6,6,2,3,2])\n", "index": 5318555, "fixIndex": 5318628, "pyVersion": 3, "exceptionSpan": [7, 12, 7, 19], "spanSlice": [[1, 1, 15, 16], [2, 11, 2, 14], [2, 16, 2, 18], [2, 20, 2, 23], [2, 16, 2, 24], [2, 11, 2, 25], [3, 7, 3, 7], [3, 5, 3, 7], [6, 11, 6, 11], [6, 13, 6, 15], [6, 17, 6, 20], [6, 13, 6, 21], [6, 11, 6, 21], [6, 5, 14, 27], [7, 12, 7, 19], [16, 1, 16, 22], [16, 25, 16, 25], [16, 27, 16, 27], [16, 29, 16, 29], [16, 31, 16, 31], [16, 33, 16, 33], [16, 35, 16, 35], [16, 37, 16, 37], [16, 39, 16, 39], [16, 24, 16, 40], [16, 1, 16, 41]], "varTypes": {"nums1": "LIST", "j": "int", "i": "int", "list1": "LIST"}, "spanTypes": {"(16, 1, 16, 22)": "FUNCTION", "(16, 25, 16, 25)": "int", "(16, 27, 16, 27)": "int", "(16, 29, 16, 29)": "int", "(16, 31, 16, 31)": "int", "(16, 33, 16, 33)": "int", "(16, 35, 16, 35)": "int", "(16, 37, 16, 37)": "int", "(16, 39, 16, 39)": "int", "(16, 24, 16, 40)": "LIST", "(2, 11, 2, 14)": "CLASS", "(2, 16, 2, 18)": "CLASS", "(2, 20, 2, 23)": "LIST", "(2, 16, 2, 24)": "SET", "(2, 11, 2, 25)": "LIST", "(3, 7, 3, 7)": "int", "(4, 7, 4, 7)": "int", "(5, 11, 5, 12)": "LIST", "(6, 11, 6, 11)": "int", "(6, 13, 6, 15)": "FUNCTION", "(6, 17, 6, 20)": "LIST", "(6, 13, 6, 21)": "int", "(6, 11, 6, 21)": "bool", "(7, 12, 7, 16)": "LIST", "(7, 18, 7, 18)": "int", "(7, 12, 7, 19)": "int", "(7, 22, 7, 22)": "int", "(7, 12, 7, 22)": "bool", "(10, 14, 10, 18)": "LIST", "(10, 20, 10, 20)": "int", "(10, 14, 10, 21)": "int", "(10, 23, 10, 23)": "int", "(10, 14, 10, 23)": "bool", "(11, 13, 11, 17)": "LIST", "(11, 13, 11, 24)": "FUNCTION", "(11, 26, 11, 26)": "int", "(11, 13, 11, 27)": "NoneType", "(12, 16, 12, 16)": "int", "(13, 12, 13, 12)": "int", "(13, 15, 13, 17)": "FUNCTION", "(13, 19, 13, 22)": "LIST", "(13, 15, 13, 23)": "int", "(13, 12, 13, 23)": "bool", "(13, 29, 13, 33)": "LIST", "(13, 36, 13, 36)": "int", "(13, 35, 13, 36)": "int", "(13, 29, 13, 37)": "int", "(13, 40, 13, 40)": "int", "(13, 29, 13, 40)": "bool", "(13, 12, 13, 40)": "bool", "(8, 16, 8, 16)": "int", "(9, 16, 9, 16)": "int"}, "errMsg": "IndexError", "ud": {"(16, 1, 16, 22)": [[1, 1, 15, 16]], "(16, 1, 16, 41)": [[1, 1, 15, 16]], "(2, 20, 2, 23)": [[16, 24, 16, 40], [16, 1, 16, 41]], "(2, 16, 2, 24)": [[16, 24, 16, 40]], "(6, 11, 6, 11)": [[9, 13, 9, 16], [3, 7, 3, 7], [3, 5, 3, 7]], "(6, 17, 6, 20)": [[16, 24, 16, 40], [16, 1, 16, 41]], "(6, 13, 6, 21)": [[16, 24, 16, 40]], "(6, 11, 6, 21)": [[9, 13, 9, 16], [3, 7, 3, 7]], "(7, 12, 7, 16)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(7, 18, 7, 18)": [[8, 13, 8, 16], [16, 25, 16, 25]], "(7, 12, 7, 19)": [[2, 11, 2, 25], [16, 25, 16, 25]], "(7, 22, 7, 22)": [[12, 13, 12, 16], [16, 31, 16, 31]], "(7, 12, 7, 22)": [[16, 31, 16, 31]], "(10, 14, 10, 18)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(10, 20, 10, 20)": [[8, 13, 8, 16], [16, 27, 16, 27]], "(10, 14, 10, 21)": [[2, 11, 2, 25], [16, 27, 16, 27], [16, 31, 16, 31]], "(10, 23, 10, 23)": [[12, 13, 12, 16], [16, 31, 16, 31]], "(10, 14, 10, 23)": [[16, 31, 16, 31]], "(7, 9, 12, 16)": [[6, 11, 6, 21]], "(11, 13, 11, 17)": [[11, 13, 11, 27], [5, 5, 5, 12]], "(11, 13, 11, 24)": [[11, 13, 11, 27]], "(11, 26, 11, 26)": [[9, 13, 9, 16]], "(11, 13, 11, 27)": [[9, 13, 9, 16], [2, 11, 2, 14]], "(12, 13, 12, 16)": [[9, 13, 9, 16], [3, 7, 3, 7]], "(13, 12, 13, 12)": [[9, 13, 9, 16]], "(13, 19, 13, 22)": [[16, 24, 16, 40], [16, 1, 16, 41]], "(13, 15, 13, 23)": [[6, 13, 6, 15], [16, 24, 16, 40]], "(13, 12, 13, 23)": [[9, 13, 9, 16], [6, 13, 6, 21]], "(13, 29, 13, 33)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(13, 35, 13, 36)": [[3, 7, 3, 7]], "(13, 29, 13, 37)": [[2, 11, 2, 25], [16, 31, 16, 31]], "(13, 40, 13, 40)": [[9, 13, 9, 16]], "(13, 29, 13, 40)": [[9, 13, 9, 16], [16, 31, 16, 31]], "(13, 12, 13, 40)": [[7, 12, 7, 22], [6, 11, 6, 21]], "(13, 9, 14, 27)": [[7, 12, 7, 22]], "(8, 13, 8, 16)": [[3, 7, 3, 7], [16, 27, 16, 27]], "(9, 13, 9, 16)": [[12, 13, 12, 16], [3, 7, 3, 7], [16, 31, 16, 31]]}, "isConsecutive": true, "isFinal": false}
{"bad": "def findDisappearedNumbers( nums):\n    nums1=list(set(nums))\n    j=1\n    i=0\n    list1=[]\n    while j<len(nums):\n        if nums1[i]==j:\n            i+=1\n            j+=1\n        elif nums1[i]>j:\n            list1.append(j)\n            j+=1 \n        if i==len(nums) and nums1[-1]!=j:\n            list1.append(j)\n            j+=1\n        if j==len(nums) and nums1[-1]!=j:\n            list1.append(j)\n    return list1\nfindDisappearedNumbers([4,3,2,6,6,2,3,2])\n", "fix": "def findDisappearedNumbers( nums):\n    nums1=list(set(nums))\n    j=1\n    i=0\n    list1=[]\n    while j<len(nums):\n        if nums1[i]==j:\n            i+=1\n            j+=1\n        elif nums1[i]>j:\n            list1.append(j)\n            j+=1 \n        if i==len(nums1) and nums1[-1]!=j:\n            list1+list(range(j,len(nums)))\n            break\n    return list1\nfindDisappearedNumbers([4,3,2,6,6,2,3,2])\n", "index": 5318690, "fixIndex": 5318869, "pyVersion": 3, "exceptionSpan": [7, 12, 7, 19], "spanSlice": [[1, 1, 18, 16], [2, 11, 2, 14], [2, 16, 2, 18], [2, 20, 2, 23], [2, 16, 2, 24], [2, 11, 2, 25], [3, 7, 3, 7], [3, 5, 3, 7], [6, 11, 6, 11], [6, 13, 6, 15], [6, 17, 6, 20], [6, 13, 6, 21], [6, 11, 6, 21], [6, 5, 17, 27], [7, 12, 7, 19], [19, 1, 19, 22], [19, 25, 19, 25], [19, 27, 19, 27], [19, 29, 19, 29], [19, 31, 19, 31], [19, 33, 19, 33], [19, 35, 19, 35], [19, 37, 19, 37], [19, 39, 19, 39], [19, 24, 19, 40], [19, 1, 19, 41]], "varTypes": {"nums1": "LIST", "j": "int", "i": "int", "list1": "LIST"}, "spanTypes": {"(19, 1, 19, 22)": "FUNCTION", "(19, 25, 19, 25)": "int", "(19, 27, 19, 27)": "int", "(19, 29, 19, 29)": "int", "(19, 31, 19, 31)": "int", "(19, 33, 19, 33)": "int", "(19, 35, 19, 35)": "int", "(19, 37, 19, 37)": "int", "(19, 39, 19, 39)": "int", "(19, 24, 19, 40)": "LIST", "(2, 11, 2, 14)": "CLASS", "(2, 16, 2, 18)": "CLASS", "(2, 20, 2, 23)": "LIST", "(2, 16, 2, 24)": "SET", "(2, 11, 2, 25)": "LIST", "(3, 7, 3, 7)": "int", "(4, 7, 4, 7)": "int", "(5, 11, 5, 12)": "LIST", "(6, 11, 6, 11)": "int", "(6, 13, 6, 15)": "FUNCTION", "(6, 17, 6, 20)": "LIST", "(6, 13, 6, 21)": "int", "(6, 11, 6, 21)": "bool", "(7, 12, 7, 16)": "LIST", "(7, 18, 7, 18)": "int", "(7, 12, 7, 19)": "int", "(7, 22, 7, 22)": "int", "(7, 12, 7, 22)": "bool", "(10, 14, 10, 18)": "LIST", "(10, 20, 10, 20)": "int", "(10, 14, 10, 21)": "int", "(10, 23, 10, 23)": "int", "(10, 14, 10, 23)": "bool", "(11, 13, 11, 17)": "LIST", "(11, 13, 11, 24)": "FUNCTION", "(11, 26, 11, 26)": "int", "(11, 13, 11, 27)": "NoneType", "(12, 16, 12, 16)": "int", "(13, 12, 13, 12)": "int", "(13, 15, 13, 17)": "FUNCTION", "(13, 19, 13, 22)": "LIST", "(13, 15, 13, 23)": "int", "(13, 12, 13, 23)": "bool", "(13, 29, 13, 33)": "LIST", "(13, 36, 13, 36)": "int", "(13, 35, 13, 36)": "int", "(13, 29, 13, 37)": "int", "(13, 40, 13, 40)": "int", "(13, 29, 13, 40)": "bool", "(13, 12, 13, 40)": "bool", "(16, 12, 16, 12)": "int", "(16, 15, 16, 17)": "FUNCTION", "(16, 19, 16, 22)": "LIST", "(16, 15, 16, 23)": "int", "(16, 12, 16, 23)": "bool", "(16, 29, 16, 33)": "LIST", "(16, 36, 16, 36)": "int", "(16, 35, 16, 36)": "int", "(16, 29, 16, 37)": "int", "(16, 40, 16, 40)": "int", "(16, 29, 16, 40)": "bool", "(16, 12, 16, 40)": "bool", "(8, 16, 8, 16)": "int", "(9, 16, 9, 16)": "int"}, "errMsg": "IndexError", "ud": {"(19, 1, 19, 22)": [[1, 1, 18, 16]], "(19, 1, 19, 41)": [[1, 1, 18, 16]], "(2, 20, 2, 23)": [[19, 24, 19, 40], [19, 1, 19, 41]], "(2, 16, 2, 24)": [[19, 24, 19, 40]], "(6, 11, 6, 11)": [[9, 13, 9, 16], [3, 7, 3, 7], [3, 5, 3, 7]], "(6, 17, 6, 20)": [[19, 24, 19, 40], [19, 1, 19, 41]], "(6, 13, 6, 21)": [[19, 24, 19, 40]], "(6, 11, 6, 21)": [[9, 13, 9, 16], [3, 7, 3, 7]], "(7, 12, 7, 16)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(7, 18, 7, 18)": [[8, 13, 8, 16], [19, 25, 19, 25]], "(7, 12, 7, 19)": [[2, 11, 2, 25], [19, 25, 19, 25]], "(7, 22, 7, 22)": [[12, 13, 12, 16], [19, 31, 19, 31]], "(7, 12, 7, 22)": [[19, 31, 19, 31]], "(10, 14, 10, 18)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(10, 20, 10, 20)": [[8, 13, 8, 16], [19, 27, 19, 27]], "(10, 14, 10, 21)": [[2, 11, 2, 25], [19, 27, 19, 27], [19, 31, 19, 31]], "(10, 23, 10, 23)": [[12, 13, 12, 16], [19, 31, 19, 31]], "(10, 14, 10, 23)": [[19, 31, 19, 31]], "(7, 9, 12, 16)": [[6, 11, 6, 21]], "(11, 13, 11, 17)": [[11, 13, 11, 27], [5, 5, 5, 12]], "(11, 13, 11, 24)": [[11, 13, 11, 27]], "(11, 26, 11, 26)": [[9, 13, 9, 16]], "(11, 13, 11, 27)": [[9, 13, 9, 16], [2, 11, 2, 14]], "(12, 13, 12, 16)": [[9, 13, 9, 16], [3, 7, 3, 7]], "(13, 12, 13, 12)": [[8, 13, 8, 16], [19, 25, 19, 25]], "(13, 19, 13, 22)": [[19, 24, 19, 40], [19, 1, 19, 41]], "(13, 15, 13, 23)": [[19, 24, 19, 40], [6, 13, 6, 15]], "(13, 12, 13, 23)": [[6, 13, 6, 21], [19, 25, 19, 25]], "(13, 29, 13, 33)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(13, 35, 13, 36)": [[3, 7, 3, 7]], "(13, 29, 13, 37)": [[2, 11, 2, 25], [19, 31, 19, 31]], "(13, 40, 13, 40)": [[9, 13, 9, 16]], "(13, 29, 13, 40)": [[9, 13, 9, 16], [19, 31, 19, 31]], "(13, 12, 13, 40)": [[7, 12, 7, 22], [6, 11, 6, 21]], "(13, 9, 15, 16)": [[7, 12, 7, 22]], "(16, 12, 16, 12)": [[9, 13, 9, 16]], "(16, 19, 16, 22)": [[19, 24, 19, 40], [19, 1, 19, 41]], "(16, 15, 16, 23)": [[19, 24, 19, 40], [6, 13, 6, 15]], "(16, 12, 16, 23)": [[9, 13, 9, 16], [6, 13, 6, 21]], "(16, 29, 16, 33)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(16, 35, 16, 36)": [[3, 7, 3, 7]], "(16, 29, 16, 37)": [[2, 11, 2, 25], [13, 35, 13, 36], [19, 31, 19, 31]], "(16, 40, 16, 40)": [[9, 13, 9, 16]], "(16, 29, 16, 40)": [[9, 13, 9, 16], [19, 31, 19, 31]], "(16, 12, 16, 40)": [[7, 12, 7, 22], [6, 11, 6, 21]], "(16, 9, 17, 27)": [[7, 12, 7, 22]], "(8, 13, 8, 16)": [[3, 7, 3, 7], [19, 27, 19, 27]], "(9, 13, 9, 16)": [[12, 13, 12, 16], [3, 7, 3, 7], [19, 31, 19, 31]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def findDisappearedNumbers( nums):\n    nums1=list(set(nums))\n    j=1\n    i=0\n    list1=[]\n    while j<len(nums):\n        if nums1[i]==j:\n            i+=1\n            j+=1\n        elif nums1[i]>j:\n            list1.append(j)\n            j+=1 \n        if i==len(nums) and nums1[-1]!=j:\n            list1+list(range(j,len(nums)))\n            break\n    return list1\nfindDisappearedNumbers([4,3,2,6,6,2,3,2])\n", "fix": "def findDisappearedNumbers( nums):\n    nums1=list(set(nums))\n    j=1\n    i=0\n    list1=[]\n    while j<len(nums):\n        if nums1[i]==j:\n            i+=1\n            j+=1\n        elif nums1[i]>j:\n            list1.append(j)\n            j+=1 \n        if i==len(nums1) and nums1[-1]!=j:\n            list1+list(range(j,len(nums)))\n            break\n    return list1\nfindDisappearedNumbers([4,3,2,6,6,2,3,2])\n", "index": 5318810, "fixIndex": 5318869, "pyVersion": 3, "exceptionSpan": [7, 12, 7, 19], "spanSlice": [[1, 1, 16, 16], [2, 11, 2, 14], [2, 16, 2, 18], [2, 20, 2, 23], [2, 16, 2, 24], [2, 11, 2, 25], [3, 7, 3, 7], [3, 5, 3, 7], [6, 11, 6, 11], [6, 13, 6, 15], [6, 17, 6, 20], [6, 13, 6, 21], [6, 11, 6, 21], [6, 5, 15, 17], [7, 12, 7, 19], [17, 1, 17, 22], [17, 25, 17, 25], [17, 27, 17, 27], [17, 29, 17, 29], [17, 31, 17, 31], [17, 33, 17, 33], [17, 35, 17, 35], [17, 37, 17, 37], [17, 39, 17, 39], [17, 24, 17, 40], [17, 1, 17, 41]], "varTypes": {"nums1": "LIST", "j": "int", "i": "int", "list1": "LIST"}, "spanTypes": {"(17, 1, 17, 22)": "FUNCTION", "(17, 25, 17, 25)": "int", "(17, 27, 17, 27)": "int", "(17, 29, 17, 29)": "int", "(17, 31, 17, 31)": "int", "(17, 33, 17, 33)": "int", "(17, 35, 17, 35)": "int", "(17, 37, 17, 37)": "int", "(17, 39, 17, 39)": "int", "(17, 24, 17, 40)": "LIST", "(2, 11, 2, 14)": "CLASS", "(2, 16, 2, 18)": "CLASS", "(2, 20, 2, 23)": "LIST", "(2, 16, 2, 24)": "SET", "(2, 11, 2, 25)": "LIST", "(3, 7, 3, 7)": "int", "(4, 7, 4, 7)": "int", "(5, 11, 5, 12)": "LIST", "(6, 11, 6, 11)": "int", "(6, 13, 6, 15)": "FUNCTION", "(6, 17, 6, 20)": "LIST", "(6, 13, 6, 21)": "int", "(6, 11, 6, 21)": "bool", "(7, 12, 7, 16)": "LIST", "(7, 18, 7, 18)": "int", "(7, 12, 7, 19)": "int", "(7, 22, 7, 22)": "int", "(7, 12, 7, 22)": "bool", "(10, 14, 10, 18)": "LIST", "(10, 20, 10, 20)": "int", "(10, 14, 10, 21)": "int", "(10, 23, 10, 23)": "int", "(10, 14, 10, 23)": "bool", "(11, 13, 11, 17)": "LIST", "(11, 13, 11, 24)": "FUNCTION", "(11, 26, 11, 26)": "int", "(11, 13, 11, 27)": "NoneType", "(12, 16, 12, 16)": "int", "(13, 12, 13, 12)": "int", "(13, 15, 13, 17)": "FUNCTION", "(13, 19, 13, 22)": "LIST", "(13, 15, 13, 23)": "int", "(13, 12, 13, 23)": "bool", "(13, 29, 13, 33)": "LIST", "(13, 36, 13, 36)": "int", "(13, 35, 13, 36)": "int", "(13, 29, 13, 37)": "int", "(13, 40, 13, 40)": "int", "(13, 29, 13, 40)": "bool", "(13, 12, 13, 40)": "bool", "(8, 16, 8, 16)": "int", "(9, 16, 9, 16)": "int"}, "errMsg": "IndexError", "ud": {"(17, 1, 17, 22)": [[1, 1, 16, 16]], "(17, 1, 17, 41)": [[1, 1, 16, 16]], "(2, 20, 2, 23)": [[17, 24, 17, 40], [17, 1, 17, 41]], "(2, 16, 2, 24)": [[17, 24, 17, 40]], "(6, 11, 6, 11)": [[9, 13, 9, 16], [3, 7, 3, 7], [3, 5, 3, 7]], "(6, 17, 6, 20)": [[17, 24, 17, 40], [17, 1, 17, 41]], "(6, 13, 6, 21)": [[17, 24, 17, 40]], "(6, 11, 6, 21)": [[9, 13, 9, 16], [3, 7, 3, 7]], "(7, 12, 7, 16)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(7, 18, 7, 18)": [[8, 13, 8, 16], [17, 25, 17, 25]], "(7, 12, 7, 19)": [[2, 11, 2, 25], [17, 25, 17, 25]], "(7, 22, 7, 22)": [[12, 13, 12, 16], [17, 31, 17, 31]], "(7, 12, 7, 22)": [[17, 31, 17, 31]], "(10, 14, 10, 18)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(10, 20, 10, 20)": [[8, 13, 8, 16], [17, 27, 17, 27]], "(10, 14, 10, 21)": [[17, 27, 17, 27], [2, 11, 2, 25], [17, 31, 17, 31]], "(10, 23, 10, 23)": [[12, 13, 12, 16], [17, 31, 17, 31]], "(10, 14, 10, 23)": [[17, 31, 17, 31]], "(7, 9, 12, 16)": [[6, 11, 6, 21]], "(11, 13, 11, 17)": [[11, 13, 11, 27], [5, 5, 5, 12]], "(11, 13, 11, 24)": [[11, 13, 11, 27]], "(11, 26, 11, 26)": [[9, 13, 9, 16]], "(11, 13, 11, 27)": [[9, 13, 9, 16], [2, 11, 2, 14]], "(12, 13, 12, 16)": [[9, 13, 9, 16], [3, 7, 3, 7]], "(13, 12, 13, 12)": [[8, 13, 8, 16], [17, 25, 17, 25]], "(13, 19, 13, 22)": [[17, 24, 17, 40], [17, 1, 17, 41]], "(13, 15, 13, 23)": [[17, 24, 17, 40], [6, 13, 6, 15]], "(13, 12, 13, 23)": [[6, 13, 6, 21], [17, 25, 17, 25]], "(13, 29, 13, 33)": [[2, 11, 2, 25], [2, 5, 2, 25]], "(13, 35, 13, 36)": [[3, 7, 3, 7]], "(13, 29, 13, 37)": [[2, 11, 2, 25], [17, 31, 17, 31]], "(13, 40, 13, 40)": [[9, 13, 9, 16]], "(13, 29, 13, 40)": [[9, 13, 9, 16], [17, 31, 17, 31]], "(13, 12, 13, 40)": [[7, 12, 7, 22], [6, 11, 6, 21]], "(13, 9, 15, 17)": [[7, 12, 7, 22]], "(8, 13, 8, 16)": [[17, 27, 17, 27], [3, 7, 3, 7]], "(9, 13, 9, 16)": [[3, 7, 3, 7], [12, 13, 12, 16], [17, 31, 17, 31]]}, "isConsecutive": true, "isFinal": true}
