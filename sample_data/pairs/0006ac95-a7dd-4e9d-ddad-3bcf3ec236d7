{"bad": "def sort_names(lst):\n    def getKey(item):\n        return item[1]\n    half_way_sorted = sorted(lst, key=getKey)\n    final_list = []\n    for i in range(len(half_way_sorted)):\n        if i != len(half_way_sorted) - 1:\n            if half_way_sorted[i][1] < half_way_sorted[i+1][1] and half_way_sorted[i] not in final_list:\n                final_list.append(half_way_sorted[i])\n            elif half_way_sorted[i][1] == half_way_sorted[i+1][1]:\n                temp_sub_list = []\n                if half_way_sorted[i] in final_list:\n                    continue\n                for j in range(i,len(half_way_sorted)):\n                    if j != len(half_way_sorted)-1:\n                        if half_way_sorted[j][1] == half_way_sorted[j+1][1]:\n                            temp_sub_list.append(half_way_sorted[j])\n                        else:\n                            temp_sub_list.append(half_way_sorted[j])\n                            sorted_temp_list = sorted(temp_sub_list)\n                            final_list = final_list + sorted_temp_list\n                            break\n                    else:\n                        if half_way_sorted[j][1] == half_way_sorted[j-1][1]:\n                            temp_sub_list.append(half_way_sorted[j])\n                            sorted_temp_list = sorted(temp_sub_list)\n                            final_list = final_list + sorted_temp_list\n                            break\n        else:\n            if half_way_sorted[i][1] == half_way_sorted[i-1][1]:\n                break\n            else:\n                final_list.append(half_way_sorted[i])\n    return final_list\nnames = [('Tova', 'Ben'), ('Eli', 'Cohen'), ('Gil', 'Cohen'), ('Haim', 'Cohen'), ('Tom', 'Haim'), ('Ben', 'Levi'), ('Eli', 'Levi'), ('Moshe', 'Levi'), ('Dina', 'Ram'), ('Eli', 'Ram')]\n\ndef find_name(lst,name,low,high):\n    if low < high:\n        middle = (low+high)/2\n        if name == lst[middle]:\n            return middle\n        elif name[1] < lst[middle][1] or (name[1] == lst[middle][1] and name[0] < lst[middle][0]) :\n            return find_name(lst, name, low, middle)\n        else:\n            return find_name(lst, name, middle+1, middle)\n    else:\n        return None\nfind_name(names,('Eli','Cohen'),0,len(names)-1)\n", "fix": "def sort_names(lst):\n    def getKey(item):\n        return item[1]\n    half_way_sorted = sorted(lst, key=getKey)\n    final_list = []\n    for i in range(len(half_way_sorted)):\n        if i != len(half_way_sorted) - 1:\n            if half_way_sorted[i][1] < half_way_sorted[i+1][1] and half_way_sorted[i] not in final_list:\n                final_list.append(half_way_sorted[i])\n            elif half_way_sorted[i][1] == half_way_sorted[i+1][1]:\n                temp_sub_list = []\n                if half_way_sorted[i] in final_list:\n                    continue\n                for j in range(i,len(half_way_sorted)):\n                    if j != len(half_way_sorted)-1:\n                        if half_way_sorted[j][1] == half_way_sorted[j+1][1]:\n                            temp_sub_list.append(half_way_sorted[j])\n                        else:\n                            temp_sub_list.append(half_way_sorted[j])\n                            sorted_temp_list = sorted(temp_sub_list)\n                            final_list = final_list + sorted_temp_list\n                            break\n                    else:\n                        if half_way_sorted[j][1] == half_way_sorted[j-1][1]:\n                            temp_sub_list.append(half_way_sorted[j])\n                            sorted_temp_list = sorted(temp_sub_list)\n                            final_list = final_list + sorted_temp_list\n                            break\n        else:\n            if half_way_sorted[i][1] == half_way_sorted[i-1][1]:\n                break\n            else:\n                final_list.append(half_way_sorted[i])\n    return final_list\nnames = [('Tova', 'Ben'), ('Eli', 'Cohen'), ('Gil', 'Cohen'), ('Haim', 'Cohen'), ('Tom', 'Haim'), ('Ben', 'Levi'), ('Eli', 'Levi'), ('Moshe', 'Levi'), ('Dina', 'Ram'), ('Eli', 'Ram')]\n\ndef find_name(lst,name,low,high):\n    if low < high:\n        middle = int((low+high)/2)\n        if name == lst[middle]:\n            return middle\n        elif name[1] < lst[middle][1] or (name[1] == lst[middle][1] and name[0] < lst[middle][0]) :\n            return find_name(lst, name, low, middle)\n        else:\n            return find_name(lst, name, middle+1, middle)\n    else:\n        return None\nfind_name(names,('Eli','Cohen'),0,len(names)-1)\n", "index": 6036515, "fixIndex": 6036548, "pyVersion": 3, "exceptionSpan": [40, 20, 40, 30], "spanSlice": [[48, 1, 48, 9], [48, 11, 48, 15], [48, 18, 48, 22], [48, 24, 48, 30], [48, 18, 48, 30], [48, 17, 48, 31], [48, 33, 48, 33], [48, 35, 48, 37], [48, 39, 48, 43], [48, 35, 48, 44], [48, 46, 48, 46], [48, 35, 48, 46], [48, 1, 48, 47], [35, 11, 35, 16], [35, 19, 35, 23], [35, 11, 35, 23], [35, 10, 35, 24], [35, 28, 35, 32], [35, 35, 35, 41], [35, 28, 35, 41], [35, 27, 35, 42], [35, 46, 35, 50], [35, 53, 35, 59], [35, 46, 35, 59], [35, 45, 35, 60], [35, 64, 35, 69], [35, 72, 35, 78], [35, 64, 35, 78], [35, 63, 35, 79], [35, 83, 35, 87], [35, 90, 35, 95], [35, 83, 35, 95], [35, 82, 35, 96], [35, 100, 35, 104], [35, 107, 35, 112], [35, 100, 35, 112], [35, 99, 35, 113], [35, 117, 35, 121], [35, 124, 35, 129], [35, 117, 35, 129], [35, 116, 35, 130], [35, 134, 35, 140], [35, 143, 35, 148], [35, 134, 35, 148], [35, 133, 35, 149], [35, 153, 35, 158], [35, 161, 35, 165], [35, 153, 35, 165], [35, 152, 35, 166], [35, 170, 35, 174], [35, 177, 35, 181], [35, 170, 35, 181], [35, 169, 35, 182], [35, 9, 35, 183], [35, 1, 35, 183], [37, 1, 47, 19], [38, 8, 38, 10], [38, 14, 38, 17], [38, 8, 38, 17], [38, 5, 47, 19], [39, 19, 39, 21], [39, 23, 39, 26], [39, 19, 39, 26], [39, 18, 39, 27], [39, 29, 39, 29], [39, 18, 39, 29], [40, 20, 40, 30]], "varTypes": {"names": "LIST", "middle": "float"}, "spanTypes": {"(35, 11, 35, 16)": "str", "(35, 19, 35, 23)": "str", "(35, 11, 35, 23)": "TUPLE", "(35, 10, 35, 24)": "TUPLE", "(35, 28, 35, 32)": "str", "(35, 35, 35, 41)": "str", "(35, 28, 35, 41)": "TUPLE", "(35, 27, 35, 42)": "TUPLE", "(35, 46, 35, 50)": "str", "(35, 53, 35, 59)": "str", "(35, 46, 35, 59)": "TUPLE", "(35, 45, 35, 60)": "TUPLE", "(35, 64, 35, 69)": "str", "(35, 72, 35, 78)": "str", "(35, 64, 35, 78)": "TUPLE", "(35, 63, 35, 79)": "TUPLE", "(35, 83, 35, 87)": "str", "(35, 90, 35, 95)": "str", "(35, 83, 35, 95)": "TUPLE", "(35, 82, 35, 96)": "TUPLE", "(35, 100, 35, 104)": "str", "(35, 107, 35, 112)": "str", "(35, 100, 35, 112)": "TUPLE", "(35, 99, 35, 113)": "TUPLE", "(35, 117, 35, 121)": "str", "(35, 124, 35, 129)": "str", "(35, 117, 35, 129)": "TUPLE", "(35, 116, 35, 130)": "TUPLE", "(35, 134, 35, 140)": "str", "(35, 143, 35, 148)": "str", "(35, 134, 35, 148)": "TUPLE", "(35, 133, 35, 149)": "TUPLE", "(35, 153, 35, 158)": "str", "(35, 161, 35, 165)": "str", "(35, 153, 35, 165)": "TUPLE", "(35, 152, 35, 166)": "TUPLE", "(35, 170, 35, 174)": "str", "(35, 177, 35, 181)": "str", "(35, 170, 35, 181)": "TUPLE", "(35, 169, 35, 182)": "TUPLE", "(35, 9, 35, 183)": "LIST", "(48, 1, 48, 9)": "FUNCTION", "(48, 11, 48, 15)": "LIST", "(48, 18, 48, 22)": "str", "(48, 24, 48, 30)": "str", "(48, 18, 48, 30)": "TUPLE", "(48, 17, 48, 31)": "TUPLE", "(48, 33, 48, 33)": "int", "(48, 35, 48, 37)": "FUNCTION", "(48, 39, 48, 43)": "LIST", "(48, 35, 48, 44)": "int", "(48, 46, 48, 46)": "int", "(48, 35, 48, 46)": "int", "(38, 8, 38, 10)": "int", "(38, 14, 38, 17)": "int", "(38, 8, 38, 17)": "bool", "(39, 19, 39, 21)": "int", "(39, 23, 39, 26)": "int", "(39, 19, 39, 26)": "int", "(39, 18, 39, 27)": "int", "(39, 29, 39, 29)": "int", "(39, 18, 39, 29)": "float", "(40, 12, 40, 15)": "TUPLE", "(40, 20, 40, 22)": "LIST", "(40, 24, 40, 29)": "float"}, "errMsg": "TypeError", "ud": {"(35, 46, 35, 59)": [[35, 35, 35, 41]], "(35, 64, 35, 78)": [[35, 35, 35, 41]], "(35, 83, 35, 95)": [[35, 64, 35, 69]], "(35, 100, 35, 112)": [[35, 19, 35, 23]], "(35, 117, 35, 129)": [[35, 28, 35, 32], [35, 107, 35, 112]], "(35, 134, 35, 148)": [[35, 107, 35, 112]], "(35, 170, 35, 181)": [[35, 161, 35, 165], [35, 28, 35, 32]], "(48, 1, 48, 9)": [[37, 1, 47, 19]], "(48, 11, 48, 15)": [[35, 9, 35, 183], [35, 1, 35, 183]], "(48, 18, 48, 30)": [[35, 28, 35, 32], [35, 35, 35, 41]], "(48, 39, 48, 43)": [[35, 9, 35, 183], [35, 1, 35, 183]], "(48, 35, 48, 44)": [[35, 9, 35, 183]], "(48, 1, 48, 47)": [[35, 9, 35, 183], [37, 1, 47, 19]], "(38, 8, 38, 10)": [[48, 1, 48, 47], [48, 33, 48, 33]], "(38, 14, 38, 17)": [[48, 1, 48, 47], [48, 35, 48, 46]], "(38, 8, 38, 17)": [[48, 35, 48, 46], [48, 33, 48, 33]], "(39, 19, 39, 21)": [[48, 1, 48, 47], [48, 33, 48, 33]], "(39, 23, 39, 26)": [[48, 1, 48, 47], [48, 35, 48, 46]], "(39, 19, 39, 26)": [[48, 35, 48, 46], [48, 33, 48, 33]], "(39, 18, 39, 27)": [[48, 35, 48, 46]], "(39, 18, 39, 29)": [[48, 35, 48, 46]], "(40, 12, 40, 15)": [[48, 1, 48, 47], [48, 18, 48, 30]], "(40, 20, 40, 22)": [[48, 1, 48, 47], [35, 9, 35, 183]], "(40, 24, 40, 29)": [[39, 9, 39, 29], [39, 18, 39, 29]], "(40, 20, 40, 30)": [[35, 9, 35, 183], [39, 18, 39, 29]]}, "isConsecutive": true, "isFinal": false}
{"bad": "def partition(lst,k):\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for num in lst:\n        if num < k:\n            lst1.append(num)\n        elif num == k:\n            lst2.append(num)\n        else:\n            lst3.append(num)\n    return lst1, lst2, lst3\n\ndef my_sort(lst):\n    import random\n    k = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, k)\n    def sub_sort(inner_lst):\n        sorted_lst = []\n        if len(inner_lst) == 0:\n            return sorted_lst\n        else:\n            min_num = min(inner_lst)\n            sorted_lst.append(min_num)\n            sub_sort(inner_lst.remove(min_num))\n    sorted_lst1 = sub_sort(lst1)\n    sorted_lst3 = sub_sort(lst3)\n    return sorted_lst1 + lst2 + sorted_lst3\nmy_sort([3,6,2,7,9,0,5,3,1,8])", "fix": "def partition(lst,k):\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    if len(lst) == 0:\n        return lst1, lst2, lst3\n    else:\n        for num in lst:\n            if num < k:\n                lst1.append(num)\n            elif num == k:\n                lst2.append(num)\n            else:\n                lst3.append(num)\n        return lst1, lst2, lst3\n\ndef my_sort(lst):\n    if len(lst) == 0:\n        return lst\n    else:\n        import random\n        k = random.choice(lst)\n        lst1, lst2, lst3 = partition(lst, k)\n        def sub_sort(inner_lst, sorted_lst = []):\n            if len(inner_lst) == 0:\n                return sorted_lst\n            else:\n                min_num = min(inner_lst)\n                sorted_lst.append(min_num)\n                inner_lst.remove(min_num)\n                return sub_sort(inner_lst, sorted_lst)\n        sorted_lst1 = sub_sort(lst1)\n        sorted_lst3 = sub_sort(lst3)\n        return sorted_lst1 + lst2 + sorted_lst3\nmy_sort([3,6,2,7,9,0,5,3,1,8])", "index": 6037519, "fixIndex": 6039359, "pyVersion": 3, "exceptionSpan": [20, 12, 20, 25], "spanSlice": [[1, 1, 12, 27], [2, 12, 2, 13], [5, 16, 5, 18], [5, 5, 11, 28], [6, 12, 6, 14], [6, 18, 6, 18], [6, 12, 6, 18], [8, 14, 8, 16], [8, 21, 8, 21], [8, 14, 8, 21], [6, 9, 11, 28], [7, 13, 7, 23], [7, 25, 7, 27], [7, 13, 7, 28], [14, 1, 28, 43], [15, 5, 15, 17], [16, 9, 16, 21], [16, 23, 16, 25], [16, 9, 16, 26], [16, 5, 16, 26], [17, 24, 17, 32], [17, 34, 17, 36], [17, 39, 17, 39], [17, 24, 17, 40], [18, 5, 25, 47], [20, 12, 20, 14], [20, 16, 20, 24], [20, 12, 20, 25], [20, 30, 20, 30], [20, 12, 20, 30], [20, 9, 25, 47], [23, 23, 23, 25], [23, 27, 23, 35], [23, 23, 23, 36], [23, 13, 23, 36], [25, 13, 25, 20], [25, 22, 25, 37], [25, 39, 25, 45], [25, 22, 25, 46], [25, 13, 25, 47], [26, 19, 26, 32], [29, 1, 29, 7], [29, 10, 29, 10], [29, 12, 29, 12], [29, 14, 29, 14], [29, 16, 29, 16], [29, 18, 29, 18], [29, 20, 29, 20], [29, 22, 29, 22], [29, 24, 29, 24], [29, 26, 29, 26], [29, 28, 29, 28], [29, 9, 29, 29], [29, 1, 29, 30]], "varTypes": {"k": "int", "lst1": "LIST", "lst2": "LIST", "lst3": "LIST", "sorted_lst": "LIST", "min_num": "int"}, "spanTypes": {"(29, 1, 29, 7)": "FUNCTION", "(29, 10, 29, 10)": "int", "(29, 12, 29, 12)": "int", "(29, 14, 29, 14)": "int", "(29, 16, 29, 16)": "int", "(29, 18, 29, 18)": "int", "(29, 20, 29, 20)": "int", "(29, 22, 29, 22)": "int", "(29, 24, 29, 24)": "int", "(29, 26, 29, 26)": "int", "(29, 28, 29, 28)": "int", "(29, 9, 29, 29)": "LIST", "(16, 9, 16, 14)": "INSTANCE", "(16, 9, 16, 21)": "FUNCTION", "(16, 23, 16, 25)": "LIST", "(16, 9, 16, 26)": "int", "(17, 24, 17, 32)": "FUNCTION", "(17, 34, 17, 36)": "LIST", "(17, 39, 17, 39)": "int", "(2, 12, 2, 13)": "LIST", "(3, 12, 3, 13)": "LIST", "(4, 12, 4, 13)": "LIST", "(5, 16, 5, 18)": "LIST", "(6, 12, 6, 14)": "int", "(6, 18, 6, 18)": "int", "(6, 12, 6, 18)": "bool", "(8, 14, 8, 16)": "int", "(8, 21, 8, 21)": "int", "(8, 14, 8, 21)": "bool", "(7, 13, 7, 16)": "LIST", "(7, 13, 7, 23)": "FUNCTION", "(7, 25, 7, 27)": "int", "(7, 13, 7, 28)": "NoneType", "(11, 13, 11, 16)": "LIST", "(11, 13, 11, 23)": "FUNCTION", "(11, 25, 11, 27)": "int", "(11, 13, 11, 28)": "NoneType", "(9, 13, 9, 16)": "LIST", "(9, 13, 9, 23)": "FUNCTION", "(9, 25, 9, 27)": "int", "(9, 13, 9, 28)": "NoneType", "(12, 12, 12, 15)": "LIST", "(12, 18, 12, 21)": "LIST", "(12, 24, 12, 27)": "LIST", "(12, 12, 12, 27)": "TUPLE", "(19, 22, 19, 23)": "LIST", "(20, 12, 20, 14)": "FUNCTION", "(20, 16, 20, 24)": "LIST,NoneType", "(20, 12, 20, 25)": "int", "(20, 30, 20, 30)": "int", "(20, 12, 20, 30)": "bool", "(23, 23, 23, 25)": "FUNCTION", "(23, 27, 23, 35)": "LIST", "(23, 23, 23, 36)": "int", "(24, 13, 24, 22)": "LIST", "(24, 13, 24, 29)": "FUNCTION", "(24, 31, 24, 37)": "int", "(24, 13, 24, 38)": "NoneType", "(25, 13, 25, 20)": "FUNCTION", "(25, 22, 25, 30)": "LIST", "(25, 22, 25, 37)": "FUNCTION", "(25, 39, 25, 45)": "int", "(25, 22, 25, 46)": "NoneType"}, "errMsg": "TypeError", "ud": {"(29, 1, 29, 7)": [[14, 1, 28, 43]], "(29, 1, 29, 30)": [[14, 1, 28, 43]], "(16, 9, 16, 14)": [[15, 5, 15, 17]], "(16, 9, 16, 21)": [[15, 5, 15, 17]], "(16, 23, 16, 25)": [[29, 9, 29, 29], [29, 1, 29, 30]], "(16, 9, 16, 26)": [[29, 9, 29, 29]], "(16, 5, 16, 26)": [[29, 22, 29, 22]], "(17, 24, 17, 32)": [[1, 1, 12, 27]], "(17, 34, 17, 36)": [[29, 9, 29, 29], [29, 1, 29, 30]], "(17, 39, 17, 39)": [[16, 5, 16, 26], [29, 22, 29, 22]], "(17, 24, 17, 40)": [[29, 22, 29, 22], [29, 9, 29, 29], [1, 1, 12, 27]], "(5, 16, 5, 18)": [[17, 24, 17, 40], [29, 9, 29, 29]], "(5, 5, 11, 28)": [[29, 9, 29, 29]], "(6, 12, 6, 14)": [[29, 28, 29, 28], [5, 5, 11, 28]], "(6, 18, 6, 18)": [[29, 22, 29, 22], [17, 24, 17, 40]], "(6, 12, 6, 18)": [[29, 22, 29, 22], [29, 28, 29, 28]], "(8, 14, 8, 16)": [[29, 28, 29, 28], [5, 5, 11, 28]], "(8, 21, 8, 21)": [[29, 22, 29, 22], [17, 24, 17, 40]], "(8, 14, 8, 21)": [[29, 22, 29, 22], [29, 28, 29, 28]], "(7, 13, 7, 16)": [[2, 5, 2, 13], [7, 13, 7, 28]], "(7, 13, 7, 23)": [[7, 13, 7, 28]], "(7, 25, 7, 27)": [[29, 26, 29, 26], [5, 5, 11, 28]], "(7, 13, 7, 28)": [[29, 26, 29, 26]], "(11, 13, 11, 16)": [[11, 13, 11, 28], [4, 5, 4, 13]], "(11, 13, 11, 23)": [[11, 13, 11, 28]], "(11, 25, 11, 27)": [[29, 28, 29, 28], [5, 5, 11, 28]], "(11, 13, 11, 28)": [[29, 28, 29, 28], [7, 13, 7, 28]], "(9, 13, 9, 16)": [[3, 12, 3, 13], [3, 5, 3, 13]], "(9, 13, 9, 23)": [[3, 12, 3, 13]], "(9, 25, 9, 27)": [[29, 22, 29, 22], [5, 5, 11, 28]], "(9, 13, 9, 28)": [[29, 22, 29, 22], [7, 13, 7, 28]], "(12, 12, 12, 15)": [[2, 5, 2, 13], [7, 13, 7, 28]], "(12, 18, 12, 21)": [[9, 13, 9, 28], [3, 5, 3, 13]], "(12, 24, 12, 27)": [[11, 13, 11, 28], [4, 5, 4, 13]], "(12, 12, 12, 27)": [[11, 13, 11, 28], [9, 13, 9, 28], [7, 13, 7, 28]], "(17, 5, 17, 40)": [[9, 13, 9, 28], [11, 13, 11, 28], [7, 13, 7, 28]], "(26, 28, 26, 31)": [[7, 13, 7, 28]], "(20, 16, 20, 24)": [[7, 13, 7, 28], [25, 13, 25, 47]], "(20, 12, 20, 25)": [[7, 13, 7, 28]], "(20, 12, 20, 30)": [[29, 20, 29, 20], [29, 22, 29, 22]], "(20, 9, 25, 47)": [[8, 14, 8, 21]], "(23, 27, 23, 35)": [[26, 19, 26, 32], [7, 13, 7, 28]], "(23, 23, 23, 36)": [[7, 13, 7, 28]], "(23, 13, 23, 36)": [[29, 20, 29, 20]], "(24, 13, 24, 22)": [[19, 22, 19, 23], [19, 9, 19, 23]], "(24, 13, 24, 29)": [[19, 22, 19, 23]], "(24, 31, 24, 37)": [[29, 20, 29, 20], [23, 13, 23, 36]], "(24, 13, 24, 38)": [[29, 20, 29, 20], [7, 13, 7, 28]], "(25, 22, 25, 30)": [[26, 19, 26, 32], [7, 13, 7, 28]], "(25, 22, 25, 37)": [[7, 13, 7, 28]], "(25, 39, 25, 45)": [[29, 20, 29, 20], [23, 13, 23, 36]], "(25, 22, 25, 46)": [[29, 20, 29, 20]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def partition(lst,k):\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for num in lst:\n        if num < k:\n            lst1.append(num)\n        elif num == k:\n            lst2.append(num)\n        else:\n            lst3.append(num)\n    return lst1, lst2, lst3\n\ndef my_sort(lst):\n    import random\n    k = random.choice(lst)\n    lst1, lst2, lst3 = partition(lst, k)\n    def sub_sort(inner_lst):\n        sorted_lst = []\n        if len(inner_lst) == 0:\n            return sorted_lst\n        else:\n            min_num = min(inner_lst)\n            sorted_lst.append(min_num)\n            inner_lst.remove(min_num)\n            sub_sort(inner_lst)\n    sorted_lst1 = sub_sort(lst1)\n    sorted_lst3 = sub_sort(lst3)\n    return sorted_lst1 + lst2 + sorted_lst3\nmy_sort([3,6,2,7,9,0,5,3,1,8])\n", "fix": "def partition(lst,k):\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    if len(lst) == 0:\n        return lst1, lst2, lst3\n    else:\n        for num in lst:\n            if num < k:\n                lst1.append(num)\n            elif num == k:\n                lst2.append(num)\n            else:\n                lst3.append(num)\n        return lst1, lst2, lst3\n\ndef my_sort(lst):\n    if len(lst) == 0:\n        return lst\n    else:\n        import random\n        k = random.choice(lst)\n        lst1, lst2, lst3 = partition(lst, k)\n        def sub_sort(inner_lst, sorted_lst = []):\n            if len(inner_lst) == 0:\n                return sorted_lst\n            else:\n                min_num = min(inner_lst)\n                sorted_lst.append(min_num)\n                inner_lst.remove(min_num)\n                return sub_sort(inner_lst, sorted_lst)\n        sorted_lst1 = sub_sort(lst1)\n        sorted_lst3 = sub_sort(lst3)\n        return sorted_lst1 + lst2 + sorted_lst3\nmy_sort([3,6,2,7,9,0,5,3,1,8])", "index": 6037636, "fixIndex": 6039359, "pyVersion": 3, "exceptionSpan": [29, 12, 29, 29], "spanSlice": [[30, 10, 30, 10], [30, 12, 30, 12], [30, 14, 30, 14], [30, 16, 30, 16], [30, 18, 30, 18], [30, 20, 30, 20], [30, 22, 30, 22], [14, 1, 29, 43], [30, 24, 30, 24], [30, 26, 30, 26], [30, 28, 30, 28], [30, 9, 30, 29], [30, 1, 30, 30], [29, 12, 29, 29], [30, 1, 30, 7]], "varTypes": {"k": "int", "lst1": "LIST", "lst2": "LIST", "lst3": "LIST", "sorted_lst": "LIST", "min_num": "int"}, "spanTypes": {"(30, 1, 30, 7)": "FUNCTION", "(30, 10, 30, 10)": "int", "(30, 12, 30, 12)": "int", "(30, 14, 30, 14)": "int", "(30, 16, 30, 16)": "int", "(30, 18, 30, 18)": "int", "(30, 20, 30, 20)": "int", "(30, 22, 30, 22)": "int", "(30, 24, 30, 24)": "int", "(30, 26, 30, 26)": "int", "(30, 28, 30, 28)": "int", "(30, 9, 30, 29)": "LIST", "(16, 9, 16, 14)": "INSTANCE", "(16, 9, 16, 21)": "FUNCTION", "(16, 23, 16, 25)": "LIST", "(16, 9, 16, 26)": "int", "(17, 24, 17, 32)": "FUNCTION", "(17, 34, 17, 36)": "LIST", "(17, 39, 17, 39)": "int", "(2, 12, 2, 13)": "LIST", "(3, 12, 3, 13)": "LIST", "(4, 12, 4, 13)": "LIST", "(5, 16, 5, 18)": "LIST", "(6, 12, 6, 14)": "int", "(6, 18, 6, 18)": "int", "(6, 12, 6, 18)": "bool", "(8, 14, 8, 16)": "int", "(8, 21, 8, 21)": "int", "(8, 14, 8, 21)": "bool", "(7, 13, 7, 16)": "LIST", "(7, 13, 7, 23)": "FUNCTION", "(7, 25, 7, 27)": "int", "(7, 13, 7, 28)": "NoneType", "(11, 13, 11, 16)": "LIST", "(11, 13, 11, 23)": "FUNCTION", "(11, 25, 11, 27)": "int", "(11, 13, 11, 28)": "NoneType", "(9, 13, 9, 16)": "LIST", "(9, 13, 9, 23)": "FUNCTION", "(9, 25, 9, 27)": "int", "(9, 13, 9, 28)": "NoneType", "(12, 12, 12, 15)": "LIST", "(12, 18, 12, 21)": "LIST", "(12, 24, 12, 27)": "LIST", "(12, 12, 12, 27)": "TUPLE", "(19, 22, 19, 23)": "LIST", "(20, 12, 20, 14)": "FUNCTION", "(20, 16, 20, 24)": "LIST", "(20, 12, 20, 25)": "int", "(20, 30, 20, 30)": "int", "(20, 12, 20, 30)": "bool", "(23, 23, 23, 25)": "FUNCTION", "(23, 27, 23, 35)": "LIST", "(23, 23, 23, 36)": "int", "(24, 13, 24, 22)": "LIST", "(24, 13, 24, 29)": "FUNCTION", "(24, 31, 24, 37)": "int", "(24, 13, 24, 38)": "NoneType", "(25, 13, 25, 21)": "LIST", "(25, 13, 25, 28)": "FUNCTION", "(25, 30, 25, 36)": "int", "(25, 13, 25, 37)": "NoneType", "(26, 13, 26, 20)": "FUNCTION", "(26, 22, 26, 30)": "LIST", "(21, 20, 21, 29)": "LIST"}, "errMsg": "TypeError", "ud": {"(30, 1, 30, 7)": [[14, 1, 29, 43]], "(30, 1, 30, 30)": [[14, 1, 29, 43]], "(16, 9, 16, 14)": [[15, 5, 15, 17]], "(16, 9, 16, 21)": [[15, 5, 15, 17]], "(16, 23, 16, 25)": [[30, 1, 30, 30], [30, 9, 30, 29]], "(16, 9, 16, 26)": [[30, 9, 30, 29]], "(16, 5, 16, 26)": [[30, 22, 30, 22]], "(17, 24, 17, 32)": [[1, 1, 12, 27]], "(17, 34, 17, 36)": [[30, 1, 30, 30], [30, 9, 30, 29]], "(17, 39, 17, 39)": [[16, 5, 16, 26], [30, 22, 30, 22]], "(17, 24, 17, 40)": [[30, 22, 30, 22], [1, 1, 12, 27], [30, 9, 30, 29]], "(5, 16, 5, 18)": [[17, 24, 17, 40], [30, 9, 30, 29]], "(5, 5, 11, 28)": [[30, 9, 30, 29]], "(6, 12, 6, 14)": [[5, 5, 11, 28], [30, 28, 30, 28]], "(6, 18, 6, 18)": [[17, 24, 17, 40], [30, 22, 30, 22]], "(6, 12, 6, 18)": [[30, 22, 30, 22], [30, 28, 30, 28]], "(8, 14, 8, 16)": [[5, 5, 11, 28], [30, 28, 30, 28]], "(8, 21, 8, 21)": [[17, 24, 17, 40], [30, 22, 30, 22]], "(8, 14, 8, 21)": [[30, 22, 30, 22], [30, 28, 30, 28]], "(7, 13, 7, 16)": [[2, 5, 2, 13], [7, 13, 7, 28]], "(7, 13, 7, 23)": [[7, 13, 7, 28]], "(7, 25, 7, 27)": [[5, 5, 11, 28], [30, 26, 30, 26]], "(7, 13, 7, 28)": [[30, 26, 30, 26]], "(11, 13, 11, 16)": [[11, 13, 11, 28], [4, 5, 4, 13]], "(11, 13, 11, 23)": [[11, 13, 11, 28]], "(11, 25, 11, 27)": [[5, 5, 11, 28], [30, 28, 30, 28]], "(11, 13, 11, 28)": [[7, 13, 7, 28], [30, 28, 30, 28]], "(9, 13, 9, 16)": [[3, 12, 3, 13], [3, 5, 3, 13]], "(9, 13, 9, 23)": [[3, 12, 3, 13]], "(9, 25, 9, 27)": [[5, 5, 11, 28], [30, 22, 30, 22]], "(9, 13, 9, 28)": [[7, 13, 7, 28], [30, 22, 30, 22]], "(12, 12, 12, 15)": [[2, 5, 2, 13], [7, 13, 7, 28]], "(12, 18, 12, 21)": [[9, 13, 9, 28], [3, 5, 3, 13]], "(12, 24, 12, 27)": [[11, 13, 11, 28], [4, 5, 4, 13]], "(12, 12, 12, 27)": [[11, 13, 11, 28], [9, 13, 9, 28], [7, 13, 7, 28]], "(17, 5, 17, 40)": [[9, 13, 9, 28], [11, 13, 11, 28], [7, 13, 7, 28]], "(27, 28, 27, 31)": [[7, 13, 7, 28]], "(20, 16, 20, 24)": [[26, 13, 26, 31], [25, 13, 25, 37]], "(20, 12, 20, 25)": [[25, 13, 25, 37]], "(20, 12, 20, 30)": [[30, 20, 30, 20]], "(23, 27, 23, 35)": [[26, 13, 26, 31], [25, 13, 25, 37]], "(23, 23, 23, 36)": [[25, 13, 25, 37]], "(23, 13, 23, 36)": [[30, 18, 30, 18]], "(24, 13, 24, 22)": [[19, 22, 19, 23], [19, 9, 19, 23]], "(24, 13, 24, 29)": [[19, 22, 19, 23]], "(24, 31, 24, 37)": [[23, 13, 23, 36], [30, 18, 30, 18]], "(24, 13, 24, 38)": [[7, 13, 7, 28], [30, 18, 30, 18]], "(25, 13, 25, 21)": [[26, 13, 26, 31], [25, 13, 25, 37]], "(25, 13, 25, 28)": [[25, 13, 25, 37]], "(25, 30, 25, 36)": [[23, 13, 23, 36], [30, 18, 30, 18]], "(25, 13, 25, 37)": [[7, 13, 7, 28], [30, 18, 30, 18]], "(26, 22, 26, 30)": [[26, 13, 26, 31], [25, 13, 25, 37]], "(26, 13, 26, 31)": [[18, 5, 26, 31], [25, 13, 25, 37]], "(21, 20, 21, 29)": [[19, 22, 19, 23], [19, 9, 19, 23]], "(21, 13, 21, 29)": [[19, 22, 19, 23]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def partition(lst,k):\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    if len(lst) == 0:\n        return lst1, lst2, lst3\n    else:\n        for num in lst:\n            if num < k:\n                lst1.append(num)\n            elif num == k:\n                lst2.append(num)\n            else:\n                lst3.append(num)\n        return lst1, lst2, lst3\n\ndef my_sort(lst):\n    if len(lst) == 0:\n        return lst\n    else:\n        import random\n        k = random.choice(lst)\n        lst1, lst2, lst3 = partition(lst, k)\n        def sub_sort(inner_lst, sorted_lst = []):\n            if len(inner_lst) == 0:\n                return sorted_lst\n            else:\n                min_num = min(inner_lst)\n                sorted_lst.append(min_num)\n                inner_lst.remove(min_num)\n                sub_sort(inner_lst, sorted_lst)\n        sorted_lst1 = sub_sort(lst1)\n        sorted_lst3 = sub_sort(lst3)\n        return sorted_lst1 + lst2 + sorted_lst3\nmy_sort([3,6,2,7,9,0,5,3,1,8])\n", "fix": "def partition(lst,k):\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    if len(lst) == 0:\n        return lst1, lst2, lst3\n    else:\n        for num in lst:\n            if num < k:\n                lst1.append(num)\n            elif num == k:\n                lst2.append(num)\n            else:\n                lst3.append(num)\n        return lst1, lst2, lst3\n\ndef my_sort(lst):\n    if len(lst) == 0:\n        return lst\n    else:\n        import random\n        k = random.choice(lst)\n        lst1, lst2, lst3 = partition(lst, k)\n        def sub_sort(inner_lst, sorted_lst = []):\n            if len(inner_lst) == 0:\n                return sorted_lst\n            else:\n                min_num = min(inner_lst)\n                sorted_lst.append(min_num)\n                inner_lst.remove(min_num)\n                return sub_sort(inner_lst, sorted_lst)\n        sorted_lst1 = sub_sort(lst1)\n        sorted_lst3 = sub_sort(lst3)\n        return sorted_lst1 + lst2 + sorted_lst3\nmy_sort([3,6,2,7,9,0,5,3,1,8])", "index": 6038860, "fixIndex": 6039359, "pyVersion": 3, "exceptionSpan": [34, 16, 34, 33], "spanSlice": [[17, 1, 34, 47], [18, 8, 18, 10], [18, 12, 18, 14], [18, 8, 18, 15], [18, 20, 18, 20], [18, 8, 18, 20], [18, 5, 34, 47], [34, 16, 34, 33], [35, 1, 35, 7], [35, 10, 35, 10], [35, 12, 35, 12], [35, 14, 35, 14], [35, 16, 35, 16], [35, 18, 35, 18], [35, 20, 35, 20], [35, 22, 35, 22], [35, 24, 35, 24], [35, 26, 35, 26], [35, 28, 35, 28], [35, 9, 35, 29], [35, 1, 35, 30]], "varTypes": {"k": "int", "lst1": "LIST", "lst2": "LIST", "lst3": "LIST", "min_num": "int"}, "spanTypes": {"(35, 1, 35, 7)": "FUNCTION", "(35, 10, 35, 10)": "int", "(35, 12, 35, 12)": "int", "(35, 14, 35, 14)": "int", "(35, 16, 35, 16)": "int", "(35, 18, 35, 18)": "int", "(35, 20, 35, 20)": "int", "(35, 22, 35, 22)": "int", "(35, 24, 35, 24)": "int", "(35, 26, 35, 26)": "int", "(35, 28, 35, 28)": "int", "(35, 9, 35, 29)": "LIST", "(18, 8, 18, 10)": "FUNCTION", "(18, 12, 18, 14)": "LIST", "(18, 8, 18, 15)": "int", "(18, 20, 18, 20)": "int", "(18, 8, 18, 20)": "bool", "(22, 13, 22, 18)": "INSTANCE", "(22, 13, 22, 25)": "FUNCTION", "(22, 27, 22, 29)": "LIST", "(22, 13, 22, 30)": "int", "(23, 28, 23, 36)": "FUNCTION", "(23, 38, 23, 40)": "LIST", "(23, 43, 23, 43)": "int", "(2, 12, 2, 13)": "LIST", "(3, 12, 3, 13)": "LIST", "(4, 12, 4, 13)": "LIST", "(5, 8, 5, 10)": "FUNCTION", "(5, 12, 5, 14)": "LIST", "(5, 8, 5, 15)": "int", "(5, 20, 5, 20)": "int", "(5, 8, 5, 20)": "bool", "(8, 20, 8, 22)": "LIST", "(9, 16, 9, 18)": "int", "(9, 22, 9, 22)": "int", "(9, 16, 9, 22)": "bool", "(11, 18, 11, 20)": "int", "(11, 25, 11, 25)": "int", "(11, 18, 11, 25)": "bool", "(10, 17, 10, 20)": "LIST", "(10, 17, 10, 27)": "FUNCTION", "(10, 29, 10, 31)": "int", "(10, 17, 10, 32)": "NoneType", "(14, 17, 14, 20)": "LIST", "(14, 17, 14, 27)": "FUNCTION", "(14, 29, 14, 31)": "int", "(14, 17, 14, 32)": "NoneType", "(12, 17, 12, 20)": "LIST", "(12, 17, 12, 27)": "FUNCTION", "(12, 29, 12, 31)": "int", "(12, 17, 12, 32)": "NoneType", "(15, 16, 15, 19)": "LIST", "(15, 22, 15, 25)": "LIST", "(15, 28, 15, 31)": "LIST", "(15, 16, 15, 31)": "TUPLE", "(25, 16, 25, 18)": "FUNCTION", "(25, 20, 25, 28)": "LIST", "(25, 16, 25, 29)": "int", "(25, 34, 25, 34)": "int", "(25, 16, 25, 34)": "bool", "(28, 27, 28, 29)": "FUNCTION", "(28, 31, 28, 39)": "LIST", "(28, 27, 28, 40)": "int", "(29, 17, 29, 26)": "LIST", "(29, 17, 29, 33)": "FUNCTION", "(29, 35, 29, 41)": "int", "(29, 17, 29, 42)": "NoneType", "(30, 17, 30, 25)": "LIST", "(30, 17, 30, 32)": "FUNCTION", "(30, 34, 30, 40)": "int", "(30, 17, 30, 41)": "NoneType", "(31, 17, 31, 24)": "FUNCTION", "(31, 26, 31, 34)": "LIST", "(31, 37, 31, 46)": "LIST", "(26, 24, 26, 33)": "LIST"}, "errMsg": "TypeError", "ud": {"(35, 1, 35, 7)": [[17, 1, 34, 47]], "(35, 1, 35, 30)": [[17, 1, 34, 47]], "(18, 12, 18, 14)": [[35, 9, 35, 29], [35, 1, 35, 30]], "(18, 8, 18, 15)": [[35, 9, 35, 29]], "(18, 8, 18, 20)": [[35, 20, 35, 20]], "(22, 13, 22, 18)": [[21, 9, 21, 21]], "(22, 13, 22, 25)": [[21, 9, 21, 21]], "(22, 27, 22, 29)": [[35, 9, 35, 29], [35, 1, 35, 30]], "(22, 13, 22, 30)": [[35, 9, 35, 29]], "(22, 9, 22, 30)": [[35, 22, 35, 22]], "(23, 28, 23, 36)": [[1, 1, 15, 31]], "(23, 38, 23, 40)": [[35, 9, 35, 29], [35, 1, 35, 30]], "(23, 43, 23, 43)": [[35, 22, 35, 22], [22, 9, 22, 30]], "(23, 28, 23, 44)": [[35, 22, 35, 22], [1, 1, 15, 31], [35, 9, 35, 29]], "(5, 12, 5, 14)": [[35, 9, 35, 29], [23, 28, 23, 44]], "(5, 8, 5, 15)": [[35, 9, 35, 29], [18, 8, 18, 10]], "(5, 8, 5, 20)": [[18, 8, 18, 15], [35, 20, 35, 20]], "(5, 5, 15, 31)": [[18, 8, 18, 20]], "(8, 20, 8, 22)": [[35, 9, 35, 29], [23, 28, 23, 44]], "(8, 9, 14, 32)": [[35, 9, 35, 29]], "(9, 16, 9, 18)": [[8, 9, 14, 32], [35, 28, 35, 28]], "(9, 22, 9, 22)": [[35, 22, 35, 22], [23, 28, 23, 44]], "(9, 16, 9, 22)": [[35, 22, 35, 22], [35, 28, 35, 28]], "(11, 18, 11, 20)": [[8, 9, 14, 32], [35, 28, 35, 28]], "(11, 25, 11, 25)": [[35, 22, 35, 22], [23, 28, 23, 44]], "(11, 18, 11, 25)": [[35, 22, 35, 22], [35, 28, 35, 28]], "(9, 13, 14, 32)": [[18, 8, 18, 20]], "(10, 17, 10, 20)": [[10, 17, 10, 32], [2, 5, 2, 13]], "(10, 17, 10, 27)": [[10, 17, 10, 32]], "(10, 29, 10, 31)": [[8, 9, 14, 32], [35, 26, 35, 26]], "(10, 17, 10, 32)": [[35, 26, 35, 26]], "(14, 17, 14, 20)": [[14, 17, 14, 32], [4, 5, 4, 13]], "(14, 17, 14, 27)": [[14, 17, 14, 32]], "(14, 29, 14, 31)": [[8, 9, 14, 32], [35, 28, 35, 28]], "(14, 17, 14, 32)": [[35, 28, 35, 28], [10, 17, 10, 32]], "(12, 17, 12, 20)": [[3, 12, 3, 13], [3, 5, 3, 13]], "(12, 17, 12, 27)": [[3, 12, 3, 13]], "(12, 29, 12, 31)": [[8, 9, 14, 32], [35, 22, 35, 22]], "(12, 17, 12, 32)": [[35, 22, 35, 22], [10, 17, 10, 32]], "(15, 16, 15, 19)": [[10, 17, 10, 32], [2, 5, 2, 13]], "(15, 22, 15, 25)": [[3, 5, 3, 13], [12, 17, 12, 32]], "(15, 28, 15, 31)": [[14, 17, 14, 32], [4, 5, 4, 13]], "(15, 16, 15, 31)": [[14, 17, 14, 32], [10, 17, 10, 32], [12, 17, 12, 32]], "(23, 9, 23, 44)": [[14, 17, 14, 32], [10, 17, 10, 32], [12, 17, 12, 32]], "(32, 32, 32, 35)": [[10, 17, 10, 32]], "(25, 20, 25, 28)": [[31, 17, 31, 47], [30, 17, 30, 41]], "(25, 16, 25, 29)": [[30, 17, 30, 41], [18, 8, 18, 10]], "(25, 16, 25, 34)": [[35, 20, 35, 20]], "(28, 31, 28, 39)": [[31, 17, 31, 47], [30, 17, 30, 41]], "(28, 27, 28, 40)": [[30, 17, 30, 41]], "(28, 17, 28, 40)": [[35, 18, 35, 18]], "(29, 17, 29, 26)": [[31, 17, 31, 47], [29, 17, 29, 42]], "(29, 17, 29, 33)": [[29, 17, 29, 42]], "(29, 35, 29, 41)": [[35, 18, 35, 18], [28, 17, 28, 40]], "(29, 17, 29, 42)": [[35, 18, 35, 18], [10, 17, 10, 32]], "(30, 17, 30, 25)": [[31, 17, 31, 47], [30, 17, 30, 41]], "(30, 17, 30, 32)": [[30, 17, 30, 41]], "(30, 34, 30, 40)": [[35, 18, 35, 18], [28, 17, 28, 40]], "(30, 17, 30, 41)": [[35, 18, 35, 18], [10, 17, 10, 32]], "(31, 26, 31, 34)": [[31, 17, 31, 47], [30, 17, 30, 41]], "(31, 37, 31, 46)": [[31, 17, 31, 47], [29, 17, 29, 42]], "(31, 17, 31, 47)": [[24, 9, 31, 47], [30, 17, 30, 41], [29, 17, 29, 42]], "(26, 24, 26, 33)": [[31, 17, 31, 47], [29, 17, 29, 42]], "(26, 17, 26, 33)": [[29, 17, 29, 42]]}, "isConsecutive": true, "isFinal": false}
{"bad": "def catalan_rec(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_rec(i)*catalan_rec(n-1-i))\n        return sum\n\ndef catalan_mem(n,mem=None):\n    if mem == None:\n        mem = {}\n    mem[0] = 1\n    mem[1] = 1\n    if n not in mem:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_mem(i, mem)*catalan_mem(n-1-i, mem))\n        mem[n] = sum\n        return mem[n, mem]\n    else:\n        return mem[n, mem]\ncatalan_mem(3)", "fix": "def catalan_rec(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_rec(i)*catalan_rec(n-1-i))\n        return sum\n\ndef catalan_mem(n,mem=None):\n    if mem == None:\n        mem = {}\n        mem[0] = 1\n        mem[1] = 1\n    if n not in mem:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_mem(i, mem)*catalan_mem(n-1-i, mem))\n        mem[n] = sum\n        return mem[n]\n    else:\n        return mem[n]\n\ncatalan_rec(4)", "index": 6104938, "fixIndex": 6105892, "pyVersion": 3, "exceptionSpan": [22, 16, 22, 26], "spanSlice": [[10, 1, 22, 26], [11, 8, 11, 10], [11, 15, 11, 18], [11, 8, 11, 18], [11, 5, 12, 16], [12, 15, 12, 16], [12, 9, 12, 16], [13, 14, 13, 14], [13, 5, 13, 14], [14, 14, 14, 14], [14, 5, 14, 14], [15, 8, 15, 8], [15, 17, 15, 19], [15, 8, 15, 19], [15, 5, 22, 26], [17, 18, 17, 22], [17, 24, 17, 24], [17, 18, 17, 25], [17, 9, 18, 64], [18, 21, 18, 31], [18, 33, 18, 33], [18, 36, 18, 38], [18, 21, 18, 39], [22, 20, 22, 20], [22, 23, 22, 25], [22, 20, 22, 25], [22, 16, 22, 26], [23, 1, 23, 11], [23, 13, 23, 13], [23, 1, 23, 14]], "varTypes": {"mem": "DICT", "sum": "int"}, "spanTypes": {"(23, 1, 23, 11)": "FUNCTION", "(23, 13, 23, 13)": "int", "(11, 8, 11, 10)": "NoneType,DICT", "(11, 15, 11, 18)": "NoneType", "(11, 8, 11, 18)": "bool", "(12, 15, 12, 16)": "DICT", "(13, 14, 13, 14)": "int", "(14, 14, 14, 14)": "int", "(15, 8, 15, 8)": "int", "(15, 17, 15, 19)": "DICT", "(15, 8, 15, 19)": "bool", "(16, 15, 16, 15)": "int", "(17, 18, 17, 22)": "CLASS", "(17, 24, 17, 24)": "int", "(17, 18, 17, 25)": "INSTANCE", "(18, 21, 18, 31)": "FUNCTION", "(18, 33, 18, 33)": "int", "(18, 36, 18, 38)": "DICT", "(22, 16, 22, 18)": "DICT", "(22, 20, 22, 20)": "int", "(22, 23, 22, 25)": "DICT", "(22, 20, 22, 25)": "TUPLE"}, "errMsg": "TypeError", "ud": {"(23, 1, 23, 11)": [[10, 1, 22, 26]], "(23, 1, 23, 14)": [[10, 1, 22, 26]], "(11, 8, 11, 10)": [[14, 5, 14, 14], [18, 21, 18, 39]], "(11, 8, 11, 18)": [[14, 5, 14, 14], [23, 1, 23, 14]], "(13, 5, 13, 14)": [[14, 5, 14, 14], [18, 21, 18, 39]], "(14, 5, 14, 14)": [[13, 14, 13, 14], [18, 21, 18, 39]], "(15, 8, 15, 8)": [[18, 21, 18, 39], [13, 5, 13, 14]], "(15, 17, 15, 19)": [[14, 5, 14, 14], [18, 21, 18, 39]], "(15, 8, 15, 19)": [[14, 5, 14, 14], [13, 5, 13, 14]], "(15, 5, 22, 26)": [[11, 8, 11, 18]], "(16, 9, 16, 15)": [[13, 5, 13, 14]], "(17, 24, 17, 24)": [[23, 1, 23, 14], [23, 13, 23, 13]], "(17, 18, 17, 25)": [[23, 13, 23, 13]], "(18, 21, 18, 31)": [[10, 1, 22, 26]], "(18, 33, 18, 33)": [[17, 9, 18, 64], [13, 5, 13, 14]], "(18, 36, 18, 38)": [[14, 5, 14, 14], [12, 9, 12, 16]], "(22, 16, 22, 18)": [[14, 5, 14, 14], [18, 21, 18, 39]], "(22, 20, 22, 20)": [[18, 21, 18, 39], [13, 5, 13, 14]], "(22, 23, 22, 25)": [[14, 5, 14, 14], [18, 21, 18, 39]], "(22, 20, 22, 25)": [[14, 5, 14, 14], [13, 5, 13, 14]], "(22, 16, 22, 26)": [[14, 5, 14, 14]]}, "isConsecutive": false, "isFinal": false}
{"bad": "def catalan_rec(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_rec(i)*catalan_rec(n-1-i))\n        return sum\n\ndef catalan_mem(n,mem=None):\n    if mem == None:\n        mem = {}\n        mem[0] = 1\n        mem[1] = 1\n    if n not in mem:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_mem(i, mem)*catalan_mem(n-1-i, mem))\n        mem[n] = sum\n        return mem[n, mem]\n    else:\n        return mem[n, mem]\ncatalan_mem(3)", "fix": "def catalan_rec(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_rec(i)*catalan_rec(n-1-i))\n        return sum\n\ndef catalan_mem(n,mem=None):\n    if mem == None:\n        mem = {}\n        mem[0] = 1\n        mem[1] = 1\n    if n not in mem:\n        sum = 0\n        for i in range(n):\n            sum += (catalan_mem(i, mem)*catalan_mem(n-1-i, mem))\n        mem[n] = sum\n        return mem[n]\n    else:\n        return mem[n]\n\ncatalan_rec(4)", "index": 6104950, "fixIndex": 6105892, "pyVersion": 3, "exceptionSpan": [22, 16, 22, 26], "spanSlice": [[10, 1, 22, 26], [11, 8, 11, 10], [11, 15, 11, 18], [11, 8, 11, 18], [11, 5, 14, 18], [12, 15, 12, 16], [12, 9, 12, 16], [13, 18, 13, 18], [13, 9, 13, 18], [14, 18, 14, 18], [14, 9, 14, 18], [15, 8, 15, 8], [15, 17, 15, 19], [15, 8, 15, 19], [15, 5, 22, 26], [17, 18, 17, 22], [17, 24, 17, 24], [17, 18, 17, 25], [17, 9, 18, 64], [18, 21, 18, 31], [18, 33, 18, 33], [18, 36, 18, 38], [18, 21, 18, 39], [22, 20, 22, 20], [22, 23, 22, 25], [22, 20, 22, 25], [22, 16, 22, 26], [23, 1, 23, 11], [23, 13, 23, 13], [23, 1, 23, 14]], "varTypes": {"mem": "DICT", "sum": "int"}, "spanTypes": {"(23, 1, 23, 11)": "FUNCTION", "(23, 13, 23, 13)": "int", "(11, 8, 11, 10)": "NoneType,DICT", "(11, 15, 11, 18)": "NoneType", "(11, 8, 11, 18)": "bool", "(12, 15, 12, 16)": "DICT", "(13, 18, 13, 18)": "int", "(14, 18, 14, 18)": "int", "(15, 8, 15, 8)": "int", "(15, 17, 15, 19)": "DICT", "(15, 8, 15, 19)": "bool", "(16, 15, 16, 15)": "int", "(17, 18, 17, 22)": "CLASS", "(17, 24, 17, 24)": "int", "(17, 18, 17, 25)": "INSTANCE", "(18, 21, 18, 31)": "FUNCTION", "(18, 33, 18, 33)": "int", "(18, 36, 18, 38)": "DICT", "(22, 16, 22, 18)": "DICT", "(22, 20, 22, 20)": "int", "(22, 23, 22, 25)": "DICT", "(22, 20, 22, 25)": "TUPLE"}, "errMsg": "TypeError", "ud": {"(23, 1, 23, 11)": [[10, 1, 22, 26]], "(23, 1, 23, 14)": [[10, 1, 22, 26]], "(11, 8, 11, 10)": [[14, 9, 14, 18], [18, 21, 18, 39]], "(11, 8, 11, 18)": [[14, 9, 14, 18], [23, 1, 23, 14]], "(13, 9, 13, 18)": [[12, 15, 12, 16], [12, 9, 12, 16]], "(14, 9, 14, 18)": [[12, 9, 12, 16], [13, 18, 13, 18], [13, 9, 13, 18]], "(15, 8, 15, 8)": [[18, 21, 18, 39], [13, 9, 13, 18]], "(15, 17, 15, 19)": [[14, 9, 14, 18], [18, 21, 18, 39]], "(15, 8, 15, 19)": [[14, 9, 14, 18], [13, 9, 13, 18]], "(15, 5, 22, 26)": [[11, 8, 11, 18]], "(16, 9, 16, 15)": [[13, 9, 13, 18]], "(17, 24, 17, 24)": [[23, 1, 23, 14], [23, 13, 23, 13]], "(17, 18, 17, 25)": [[23, 13, 23, 13]], "(18, 21, 18, 31)": [[10, 1, 22, 26]], "(18, 33, 18, 33)": [[17, 9, 18, 64], [13, 9, 13, 18]], "(18, 36, 18, 38)": [[14, 9, 14, 18], [12, 9, 12, 16]], "(22, 16, 22, 18)": [[14, 9, 14, 18], [18, 21, 18, 39]], "(22, 20, 22, 20)": [[18, 21, 18, 39], [13, 9, 13, 18]], "(22, 23, 22, 25)": [[14, 9, 14, 18], [18, 21, 18, 39]], "(22, 20, 22, 25)": [[14, 9, 14, 18], [13, 9, 13, 18]], "(22, 16, 22, 26)": [[14, 9, 14, 18]]}, "isConsecutive": true, "isFinal": true}
